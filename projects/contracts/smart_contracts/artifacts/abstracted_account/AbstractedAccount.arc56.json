{
    "name": "AbstractedAccount",
    "structs": {
        "PluginInfo": [
            {
                "name": "lastValidRound",
                "type": "uint64"
            },
            {
                "name": "cooldown",
                "type": "uint64"
            },
            {
                "name": "lastCalled",
                "type": "uint64"
            },
            {
                "name": "adminPrivileges",
                "type": "bool"
            },
            {
                "name": "methods",
                "type": "(byte[4],uint64,uint64)[]"
            }
        ],
        "PluginsKey": [
            {
                "name": "application",
                "type": "uint64"
            },
            {
                "name": "allowedCaller",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "address",
                    "name": "controlledAddress",
                    "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"
                },
                {
                    "type": "address",
                    "name": "admin",
                    "desc": "The admin for this app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_changeAdmin",
            "args": [
                {
                    "type": "address",
                    "name": "newAdmin",
                    "desc": "The new admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Attempt to change the admin for this app. Some implementations MAY not support this.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_pluginChangeAdmin",
            "args": [
                {
                    "type": "uint64",
                    "name": "plugin",
                    "desc": "The app calling the plugin"
                },
                {
                    "type": "address",
                    "name": "allowedCaller",
                    "desc": "The address that triggered the plugin"
                },
                {
                    "type": "address",
                    "name": "newAdmin",
                    "desc": "The new admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Attempt to change the admin via plugin.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_getAdmin",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_verifyAuthAddr",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Verify the abstracted account is rekeyed to this app",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_rekeyTo",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                },
                {
                    "type": "bool",
                    "name": "flash",
                    "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_canCall",
            "args": [
                {
                    "type": "uint64",
                    "name": "plugin",
                    "desc": "the plugin to be rekeyed to"
                },
                {
                    "type": "address",
                    "name": "address",
                    "desc": "the address that triggered the plugin"
                },
                {
                    "type": "byte[4]",
                    "name": "method"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "whether the plugin can be called via txn sender or globally"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "check whether the plugin can be used",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_rekeyToPlugin",
            "args": [
                {
                    "type": "uint64",
                    "name": "plugin",
                    "desc": "The app to rekey to"
                },
                {
                    "type": "uint64[]",
                    "name": "methodOffsets",
                    "desc": "The indices of the methods being used in the group\nif the plugin has method restrictions these indices are required to match\nthe methods used on each subsequent call to the plugin within the group"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Temporarily rekey to an approved plugin app address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_rekeyToNamedPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "name",
                    "desc": "The name of the plugin to rekey to"
                },
                {
                    "type": "uint64[]",
                    "name": "methodOffsets",
                    "desc": "The indices of the methods being used in the group\nif the plugin has method restrictions these indices are required to match\nthe methods used on each subsequent call to the plugin within the group"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Temporarily rekey to a named plugin app address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_addPlugin",
            "args": [
                {
                    "type": "uint64",
                    "name": "app",
                    "desc": "The app to add"
                },
                {
                    "type": "address",
                    "name": "allowedCaller",
                    "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
                },
                {
                    "type": "uint64",
                    "name": "lastValidRound",
                    "desc": "The round when the permission expires"
                },
                {
                    "type": "uint64",
                    "name": "cooldown",
                    "desc": "The number of rounds that must pass before the plugin can be called again"
                },
                {
                    "type": "bool",
                    "name": "adminPrivileges",
                    "desc": "Whether the plugin has permissions to change the admin account"
                },
                {
                    "type": "(byte[4],uint64)[]",
                    "name": "methods",
                    "desc": "The methods that are allowed to be called for the plugin by the address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add an app to the list of approved plugins",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_removePlugin",
            "args": [
                {
                    "type": "uint64",
                    "name": "app",
                    "desc": "The app to remove"
                },
                {
                    "type": "address",
                    "name": "allowedCaller",
                    "desc": "The address of that's allowed to call the app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove an app from the list of approved plugins",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_addNamedPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "name",
                    "desc": "The plugin name"
                },
                {
                    "type": "uint64",
                    "name": "app",
                    "desc": "The plugin app"
                },
                {
                    "type": "address",
                    "name": "allowedCaller",
                    "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
                },
                {
                    "type": "uint64",
                    "name": "lastValidRound",
                    "desc": "The round when the permission expires"
                },
                {
                    "type": "uint64",
                    "name": "cooldown",
                    "desc": "The number of rounds that must pass before the plugin can be called again"
                },
                {
                    "type": "bool",
                    "name": "adminPrivileges",
                    "desc": "Whether the plugin has permissions to change the admin account"
                },
                {
                    "type": "(byte[4],uint64)[]",
                    "name": "methods",
                    "desc": "The methods that are allowed to be called for the plugin by the address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add a named plugin",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc58_removeNamedPlugin",
            "args": [
                {
                    "type": "string",
                    "name": "name",
                    "desc": "The plugin name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove a named plugin",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW4=",
                    "desc": "The admin of the abstracted account. This address can add plugins and initiate rekeys"
                },
                "controlledAddress": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y29udHJvbGxlZF9hZGRyZXNz",
                    "desc": "The address this app controls"
                }
            },
            "local": {},
            "box": {
                "plugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginInfo",
                    "key": "cA==",
                    "desc": "Plugins that add functionality to the controlledAddress and the account that has permission to use it."
                },
                "namedPlugins": {
                    "keyType": "AVMString",
                    "valueType": "PluginsKey",
                    "key": "bg==",
                    "desc": "Plugins that have been given a name for discoverability"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        471,
                        533,
                        706,
                        714,
                        727,
                        735,
                        743,
                        946,
                        1046,
                        1053,
                        1060,
                        1067,
                        1297,
                        1851,
                        1862,
                        1869,
                        1876,
                        1933,
                        1944,
                        1951,
                        1958,
                        2021,
                        2324
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        511,
                        512,
                        968,
                        995,
                        1033,
                        1047,
                        1054,
                        1061,
                        1863,
                        1870,
                        1945,
                        1952,
                        2022,
                        2082,
                        2084,
                        2088,
                        2237,
                        2239,
                        2243
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        932
                    ],
                    "errorMessage": "Length is 4"
                },
                {
                    "pc": [
                        174,
                        189,
                        222,
                        240,
                        270,
                        291,
                        310,
                        341,
                        359,
                        371,
                        388,
                        409,
                        424
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1200
                    ],
                    "errorMessage": "Sender must be either controlledAddress or admin"
                },
                {
                    "pc": [
                        1244,
                        1372,
                        2043,
                        2152,
                        2179,
                        2307
                    ],
                    "errorMessage": "Sender must be the admin"
                },
                {
                    "pc": [
                        1265
                    ],
                    "errorMessage": "Sender must be the plugin"
                },
                {
                    "pc": [
                        1312
                    ],
                    "errorMessage": "This plugin does not have admin privileges"
                },
                {
                    "pc": [
                        1278
                    ],
                    "errorMessage": "This plugin is not in control of the account"
                },
                {
                    "pc": [
                        1272,
                        1336
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1261,
                        1276,
                        1649
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        428
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        177,
                        192,
                        225,
                        243,
                        273,
                        294,
                        313,
                        344,
                        362,
                        374,
                        391,
                        412
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1724
                    ],
                    "errorMessage": "cannot call other apps during plugin rekey"
                },
                {
                    "pc": [
                        1242,
                        1269,
                        1325,
                        1333,
                        1340,
                        1370,
                        1377,
                        1640,
                        1644,
                        2041,
                        2150,
                        2177,
                        2305
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        928
                    ],
                    "errorMessage": "invalid method signature length"
                },
                {
                    "pc": [
                        1729
                    ],
                    "errorMessage": "invalid onComplete"
                },
                {
                    "pc": [
                        1594
                    ],
                    "errorMessage": "invalid plugin call"
                },
                {
                    "pc": [
                        902
                    ],
                    "errorMessage": "malformed methodOffsets"
                },
                {
                    "pc": [
                        1819
                    ],
                    "errorMessage": "method on cooldown"
                },
                {
                    "pc": [
                        1735
                    ],
                    "errorMessage": "no app id provided"
                },
                {
                    "pc": [
                        1635
                    ],
                    "errorMessage": "no rekey back found"
                },
                {
                    "pc": [
                        1831
                    ],
                    "errorMessage": "not allowed"
                },
                {
                    "pc": [
                        2165,
                        2321,
                        2332
                    ],
                    "errorMessage": "plugin does not exist"
                },
                {
                    "pc": [
                        1570
                    ],
                    "errorMessage": "plugin expired"
                },
                {
                    "pc": [
                        1558
                    ],
                    "errorMessage": "plugin not found"
                },
                {
                    "pc": [
                        1582
                    ],
                    "errorMessage": "plugin on cooldown"
                },
                {
                    "pc": [
                        1463
                    ],
                    "errorMessage": "rekey back not found"
                },
                {
                    "pc": [
                        1744
                    ],
                    "errorMessage": "wrong app id"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}