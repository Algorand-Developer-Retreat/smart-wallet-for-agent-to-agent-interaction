{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/constants.ts",
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMoC;AC8BoB;AAAtD;AAPF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AA6HG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAzGH;;;AAyGG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAxFH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAwFG;;;AAAA;;AAtBD;;AAAA;AAAA;AAAA;;AAAA;AAlEF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAkEE;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAxDF;;;AAAA;AAwDE;;;AAAA;;AATC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA/CH;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;AA+CG;;;AAAA;;AAAD;;;AAEgB;;AAAd;ADvEqB;ACyErB;;AAAA;ADxEsB;ACyEtB;;AAAA;ADxEqB;;;;;;;ACyErB;;AAAA;;AAGF;;;AACa;;AAAkB;;AAAtB;AAAP;ADhFgC;ACiFhC;;AAAA;;AAQF;;;AACa;;AAAkB;;AAAtB;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAkB;;AAA1B;AAAP;AAEA;AAE0B;;;;;;AACT;;;;;AAHjB;;;AAKS;;;AALT;;AAiBF;;;AAEa;;AAAkB;;AAAtB;AAAP;ADjHgC;AAAA;AAAA;AAAA;ACkHhC;AAEe;;AAAA;;AAAkB;;AAA1B;AAAP;AACe;;AAAA;;ADrHiB;AAAA;AAAA;AAAA;ACqHzB;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;ADrHqB;AAAA;AAAA;AAAA;ACoCjB;;AAAA;AAAA;;AAAA;;AAAJ;;;AAEE;AAIiD;;AD1C9B;AAAA;AAAA;AAAA;AC0CF;;AAAA;AD1CE;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACsCnB;;;AAMS;;;AANT;AAcgB;ADnDI;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;ACwDM;;AAAA;AAAkB;;;;;;;AAAnC;;;;;AAJQ;;;AAGT;;;AAHS;;AA2EpB;;;AAEa;;AAAkB;;AAAtB;AAAP;ADhIsB;AAAA;AAAA;AAAA;ACiIf;;AAAA;AAAP;ADjIsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AACC;AAAA;AAAA;AAAA;AC+ItB;;;;;;;;;;AAZsB;;;AAIf;;;AAQyB;;;AALhB;;;AAET;;;AAGP;;AD/IsB;AAAA;AAAA;AAAA;ACoJtB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 5"
    },
    "7": {
      "op": "bytecblock \"seller\" \"asset\" \"negotiated_price\""
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "41": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "44": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\""
      ],
      "stack_out": [
        "\"negotiated_price\""
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"negotiated_price\"",
        "0"
      ],
      "stack_out": [
        "\"negotiated_price\"",
        "0"
      ]
    },
    "46": {
      "op": "app_global_put",
      "stack_out": []
    },
    "47": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "49": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "52": {
      "op": "pushbytess 0xc170b9fe 0xa628750d 0xc60bd184 0x52c906ae 0x68e86343 0xdfa148d6 // method \"createListingApplication(asset,address,uint64)void\", method \"recordNegotiatedPrice(uint64)void\", method \"optinToListingAsset(pay,uint64)void\", method \"purchase(pay,address)void\", method \"delist(address)void\", method \"getSeller()address\"",
      "defined_out": [
        "Method(createListingApplication(asset,address,uint64)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)"
      ],
      "stack_out": [
        "Method(createListingApplication(asset,address,uint64)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)"
      ]
    },
    "84": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createListingApplication(asset,address,uint64)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createListingApplication(asset,address,uint64)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)",
        "tmp%2#0"
      ]
    },
    "87": {
      "op": "match main_createListingApplication_route@5 main_recordNegotiatedPrice_route@6 main_optinToListingAsset_route@7 main_purchase_route@8 main_delist_route@9 main_getSeller_route@10",
      "stack_out": []
    },
    "101": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "block": "main_getSeller_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.getSeller",
      "op": "callsub getSeller",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "113": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_delist_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "126": {
      "op": "intc_3 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "DeleteApplication"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "128": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "132": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "135": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.delist",
      "op": "callsub delist",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_purchase_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "142": {
      "op": "intc_3 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "DeleteApplication"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "1"
      ]
    },
    "151": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "152": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "153": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "155": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "157": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "161": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.purchase",
      "op": "callsub purchase",
      "stack_out": []
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_optinToListingAsset_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "176": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "178": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "180": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "182": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "186": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%20#0"
      ]
    },
    "187": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset",
      "op": "callsub optinToListingAsset",
      "stack_out": []
    },
    "190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "return",
      "stack_out": []
    },
    "192": {
      "block": "main_recordNegotiatedPrice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "202": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "203": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice",
      "op": "callsub recordNegotiatedPrice",
      "stack_out": []
    },
    "206": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "block": "main_createListingApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "215": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "220": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "225": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "228": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%9#0"
      ]
    },
    "229": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.createListingApplication",
      "op": "callsub createListingApplication",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.createListingApplication",
      "params": {
        "asset#0": "uint64",
        "seller#0": "bytes",
        "minimumPriceToAccept#0": "uint64"
      },
      "block": "createListingApplication",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "237": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "240": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "241": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "243": {
      "op": "app_global_put",
      "stack_out": []
    },
    "244": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\""
      ],
      "stack_out": [
        "\"seller\""
      ]
    },
    "245": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ],
      "stack_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ]
    },
    "247": {
      "op": "app_global_put",
      "stack_out": []
    },
    "248": {
      "op": "pushbytes \"price\"",
      "defined_out": [
        "\"price\""
      ],
      "stack_out": [
        "\"price\""
      ]
    },
    "255": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"price\"",
        "minimumPriceToAccept#0 (copy)"
      ],
      "stack_out": [
        "\"price\"",
        "minimumPriceToAccept#0 (copy)"
      ]
    },
    "257": {
      "op": "app_global_put",
      "stack_out": []
    },
    "258": {
      "retsub": true,
      "op": "retsub"
    },
    "259": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice",
      "params": {
        "price#0": "uint64"
      },
      "block": "recordNegotiatedPrice",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "262": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "267": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "268": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\""
      ],
      "stack_out": [
        "\"negotiated_price\""
      ]
    },
    "269": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"negotiated_price\"",
        "price#0 (copy)"
      ],
      "stack_out": [
        "\"negotiated_price\"",
        "price#0 (copy)"
      ]
    },
    "271": {
      "op": "app_global_put",
      "stack_out": []
    },
    "272": {
      "retsub": true,
      "op": "retsub"
    },
    "273": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset",
      "params": {
        "payment#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "optinToListingAsset",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "276": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "280": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "281": {
      "op": "assert",
      "stack_out": []
    },
    "282": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "284": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "286": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "288": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "289": {
      "op": "assert",
      "stack_out": []
    },
    "290": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "292": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "294": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "297": {
      "op": "assert",
      "stack_out": []
    },
    "298": {
      "op": "itxn_begin"
    },
    "299": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "301": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0 (copy)"
      ]
    },
    "303": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "305": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "306": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "308": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "310": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "311": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "314": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "316": {
      "op": "itxn_submit"
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.purchase",
      "params": {
        "payment#0": "uint64",
        "buyer#0": "bytes"
      },
      "block": "purchase",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "321": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "323": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "326": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "327": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "328": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"negotiated_price\""
      ]
    },
    "329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "330": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "331": {
      "error": "price hasn't been negotiated yet",
      "op": "assert // price hasn't been negotiated yet",
      "stack_out": []
    },
    "332": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "334": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "336": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "339": {
      "op": "assert",
      "stack_out": []
    },
    "340": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "342": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "345": {
      "op": "bytec_2 // \"negotiated_price\"",
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"negotiated_price\""
      ]
    },
    "346": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "347": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "348": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "349": {
      "op": "assert",
      "stack_out": []
    },
    "350": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "352": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "354": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "356": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "357": {
      "op": "assert",
      "stack_out": []
    },
    "358": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "359": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "360": {
      "op": "app_global_get_ex",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "361": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "362": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyer#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "buyer#0 (copy)"
      ]
    },
    "364": {
      "op": "swap",
      "stack_out": [
        "buyer#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "365": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "367": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "369": {
      "op": "bz purchase_after_if_else@3",
      "stack_out": []
    },
    "372": {
      "op": "itxn_begin"
    },
    "373": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "375": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#1",
        "0"
      ]
    },
    "376": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "tmp%2#1",
        "0",
        "\"asset\""
      ]
    },
    "377": {
      "op": "app_global_get_ex",
      "stack_out": [
        "tmp%2#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "378": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#1",
        "maybe_value%1#0"
      ]
    },
    "379": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "381": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%0#0",
        "0"
      ]
    },
    "383": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "value%0#0",
        "0",
        "\"asset\""
      ]
    },
    "384": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "385": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0"
      ]
    },
    "386": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "388": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "390": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "392": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "394": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "396": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": []
    },
    "398": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "399": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "401": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "402": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "404": {
      "op": "itxn_submit"
    },
    "405": {
      "block": "purchase_after_if_else@3",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "406": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "407": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "408": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "409": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2"
      ]
    },
    "410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#2",
        "0"
      ]
    },
    "411": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "0",
        "\"asset\""
      ]
    },
    "412": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#2",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "413": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#0"
      ]
    },
    "414": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#2",
        "value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "value%0#1",
        "check%0#0"
      ]
    },
    "416": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "maybe_value%0#2",
        "value%0#1"
      ]
    },
    "417": {
      "op": "pushbytes \" Sold\"",
      "defined_out": [
        "\" Sold\"",
        "maybe_value%0#2",
        "value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "value%0#1",
        "\" Sold\""
      ]
    },
    "424": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_Note_idx_0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "inner_txn_params%0%%param_Note_idx_0#0"
      ]
    },
    "425": {
      "op": "itxn_field Note",
      "stack_out": [
        "maybe_value%0#2"
      ]
    },
    "427": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "429": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "430": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "433": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "435": {
      "op": "itxn_submit"
    },
    "436": {
      "retsub": true,
      "op": "retsub"
    },
    "437": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.delist",
      "params": {
        "caller#0": "bytes"
      },
      "block": "delist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "440": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "442": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "444": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "445": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "446": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "447": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "448": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "449": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "450": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "caller#0 (copy)"
      ]
    },
    "452": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "453": {
      "error": "only the seller can delist",
      "op": "assert // only the seller can delist",
      "stack_out": []
    },
    "454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "455": {
      "op": "bytec_0 // \"seller\"",
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "456": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "457": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "458": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "459": {
      "op": "bytec_0 // \"seller\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"seller\""
      ]
    },
    "460": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "461": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "463": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"asset\""
      ]
    },
    "464": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "465": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "467": {
      "op": "bytec_0 // \"seller\"",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"seller\""
      ]
    },
    "468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "469": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "470": {
      "op": "itxn_begin"
    },
    "471": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%3#0"
      ]
    },
    "472": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%4#0",
        "maybe_value%2#0"
      ]
    },
    "475": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%4#0"
      ]
    },
    "477": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%1#0"
      ]
    },
    "478": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "480": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "4"
      ]
    },
    "481": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "483": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "0"
      ]
    },
    "484": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "486": {
      "op": "itxn_next"
    },
    "487": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "489": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "490": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "493": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "495": {
      "op": "itxn_submit"
    },
    "496": {
      "retsub": true,
      "op": "retsub"
    },
    "497": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.getSeller",
      "params": {},
      "block": "getSeller",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "498": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "499": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "500": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "501": {
      "retsub": true,
      "op": "retsub"
    }
  }
}