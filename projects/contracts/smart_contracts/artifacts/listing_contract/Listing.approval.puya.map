{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/constants.ts",
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMoC;AC+BoB;AAAtD;AAJF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAyHG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AArGH;;;AAqGG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AApFH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAoFG;;;AAAA;;AAtBD;;AAAA;AAAA;AAAA;;AAAA;AA9DF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA8DE;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AApDF;;;AAAA;AAoDE;;;AAAA;;AARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5CH;;;AAAA;AAAA;;AAAA;;;AA4CG;;;AAAA;;AAAD;;;AAEgB;;AAAd;ADxEqB;AC0ErB;;AAAA;ADzEsB;AC0EtB;;AAAA;;AAGF;;;AACa;;AD9EW;AAAA;AAAA;AAAA;AC8Ef;AAAP;ADhFgC;ACiFhC;;AAAA;;AAQF;;;AACa;;AAAkB;;AAAtB;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAmB;;AAAuB;;AAA9B;AAApB;AAAP;AAEA;AAE0B;;;;;;AACT;;;;;AAHjB;;;AAKS;;;AALT;;AAiBF;;;AAEa;;AAAkB;;AAAtB;AAAP;ADjHgC;AAAA;AAAA;AAAA;ACkHhC;AAEe;;AAAA;;AAAkB;;AAA1B;AAAP;AACe;;AAAA;;ADrHiB;AAAA;AAAA;AAAA;ACqHzB;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;ADrHqB;AAAA;AAAA;AAAA;ACqCjB;;AAAA;AAAA;;AAAA;;AAAJ;;;AAEE;AAIiD;;AD3C9B;AAAA;AAAA;AAAA;AC2CF;;AAAA;AD3CE;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACuCnB;;;AAMS;;;AANT;AAcF;ADpDsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AC0DM;;AAAA;AAAkB;;;;;;;AAAnC;;;;;;;AALV;;;AAIS;;;AAJT;;AA0EF;;;AAEa;;AAAkB;;AAAtB;AAAP;ADhIsB;AAAA;AAAA;AAAA;ACiIf;;AAAA;AAAP;ADjIsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AACC;AAAA;AAAA;AAAA;AC+ItB;;;;;;;;;;AAZsB;;;AAIf;;;AAQyB;;;AALhB;;;AAET;;;AAGP;;AAMa;;ADtJQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACwJW;;AAAA;ADxJX;AAAA;AAAA;AAAA;ACyJe;;AAAA;ADzJf;AAAA;AAAA;AAAA;AC0JQ;;AAAA;ADzJP;AAAA;AAAA;AAAA;ACoJtB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 5"
    },
    "7": {
      "op": "bytecblock \"asset\" \"seller\" \"negotiated_price\""
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "41": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "44": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\""
      ],
      "stack_out": [
        "\"negotiated_price\""
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"negotiated_price\"",
        "0"
      ],
      "stack_out": [
        "\"negotiated_price\"",
        "0"
      ]
    },
    "46": {
      "op": "app_global_put",
      "stack_out": []
    },
    "47": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "49": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "52": {
      "op": "pushbytess 0x7ce7d8b8 0xa628750d 0xc60bd184 0x52c906ae 0x68e86343 0x008c6904 // method \"createApplication(asset,address)void\", method \"recordNegotiatedPrice(uint64)void\", method \"optinToListingAsset(pay,uint64)void\", method \"purchase(pay,address)void\", method \"delist(address)void\", method \"getInfo()(uint64,uint64,string,string,uint64,address)\"",
      "defined_out": [
        "Method(createApplication(asset,address)void)",
        "Method(delist(address)void)",
        "Method(getInfo()(uint64,uint64,string,string,uint64,address))",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(asset,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(delist(address)void)",
        "Method(getInfo()(uint64,uint64,string,string,uint64,address))"
      ]
    },
    "84": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(asset,address)void)",
        "Method(delist(address)void)",
        "Method(getInfo()(uint64,uint64,string,string,uint64,address))",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(asset,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(delist(address)void)",
        "Method(getInfo()(uint64,uint64,string,string,uint64,address))",
        "tmp%2#0"
      ]
    },
    "87": {
      "op": "match main_createApplication_route@5 main_recordNegotiatedPrice_route@6 main_optinToListingAsset_route@7 main_purchase_route@8 main_delist_route@9 main_getInfo_route@10",
      "stack_out": []
    },
    "101": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "block": "main_getInfo_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.getInfo",
      "op": "callsub getInfo",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "113": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%0#0"
      ]
    },
    "115": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "116": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "118": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "119": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "121": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "122": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "123": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "126": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "129": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "131": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "132": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "133": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "136": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "139": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "elements_to_encode%4#0"
      ]
    },
    "141": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "142": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "144": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "147": {
      "op": "pushbytes 0x003c",
      "defined_out": [
        "0x003c",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "0x003c"
      ]
    },
    "151": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "152": {
      "op": "dig 3",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "154": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "155": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "60"
      ]
    },
    "157": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "158": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "159": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "164": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "165": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "elements_to_encode%5#0"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "168": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "170": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "173": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "0x151f7c75"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "180": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "181": {
      "op": "log",
      "stack_out": []
    },
    "182": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "return",
      "stack_out": []
    },
    "184": {
      "block": "main_delist_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "186": {
      "op": "intc_3 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "DeleteApplication"
      ]
    },
    "187": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "188": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "189": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "191": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "192": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "195": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.delist",
      "op": "callsub delist",
      "stack_out": []
    },
    "198": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "199": {
      "op": "return",
      "stack_out": []
    },
    "200": {
      "block": "main_purchase_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "202": {
      "op": "intc_3 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "DeleteApplication"
      ]
    },
    "203": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "204": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "205": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "207": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "208": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "210": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "211": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "212": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "213": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "215": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "217": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "218": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "221": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.purchase",
      "op": "callsub purchase",
      "stack_out": []
    },
    "224": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "block": "main_optinToListingAsset_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "228": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "1"
      ]
    },
    "236": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "237": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "238": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "240": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "241": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "242": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "243": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "246": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%19#0"
      ]
    },
    "247": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset",
      "op": "callsub optinToListingAsset",
      "stack_out": []
    },
    "250": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "251": {
      "op": "return",
      "stack_out": []
    },
    "252": {
      "block": "main_recordNegotiatedPrice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "254": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "255": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "256": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "258": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "259": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "262": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "263": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice",
      "op": "callsub recordNegotiatedPrice",
      "stack_out": []
    },
    "266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "block": "main_createApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "270": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "271": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "272": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "274": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "275": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "276": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "279": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "280": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "282": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "285": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "289": {
      "op": "return",
      "stack_out": []
    },
    "290": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.createApplication",
      "params": {
        "asset#0": "uint64",
        "seller#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "293": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "295": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "296": {
      "op": "bytec_0 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "297": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "300": {
      "op": "bytec_1 // \"seller\"",
      "defined_out": [
        "\"seller\""
      ],
      "stack_out": [
        "\"seller\""
      ]
    },
    "301": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ],
      "stack_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ]
    },
    "303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "304": {
      "retsub": true,
      "op": "retsub"
    },
    "305": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice",
      "params": {
        "price#0": "uint64"
      },
      "block": "recordNegotiatedPrice",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "308": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "311": {
      "op": "bytec_1 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"seller\""
      ]
    },
    "312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "313": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "315": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "316": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\""
      ],
      "stack_out": [
        "\"negotiated_price\""
      ]
    },
    "317": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"negotiated_price\"",
        "price#0 (copy)"
      ],
      "stack_out": [
        "\"negotiated_price\"",
        "price#0 (copy)"
      ]
    },
    "319": {
      "op": "app_global_put",
      "stack_out": []
    },
    "320": {
      "retsub": true,
      "op": "retsub"
    },
    "321": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset",
      "params": {
        "payment#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "optinToListingAsset",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "324": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "326": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "329": {
      "error": "optinToListingAsset must be called by creator",
      "op": "assert // optinToListingAsset must be called by creator",
      "stack_out": []
    },
    "330": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "332": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "334": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "336": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "337": {
      "error": "payment receiver must be this app",
      "op": "assert // payment receiver must be this app",
      "stack_out": []
    },
    "338": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "340": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "342": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "344": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "2"
      ]
    },
    "346": {
      "op": "*",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "347": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "348": {
      "error": "payment amount must be asset optin min balance + min account mbr",
      "op": "assert // payment amount must be asset optin min balance + min account mbr",
      "stack_out": []
    },
    "349": {
      "op": "itxn_begin"
    },
    "350": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "352": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0 (copy)"
      ]
    },
    "354": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "356": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "357": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "359": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "361": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "362": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "364": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "365": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "367": {
      "op": "itxn_submit"
    },
    "368": {
      "retsub": true,
      "op": "retsub"
    },
    "369": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.purchase",
      "params": {
        "payment#0": "uint64",
        "buyer#0": "bytes"
      },
      "block": "purchase",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "372": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "374": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "376": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "377": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "379": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"negotiated_price\""
      ]
    },
    "380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "382": {
      "error": "price hasn't been negotiated yet",
      "op": "assert // price hasn't been negotiated yet",
      "stack_out": []
    },
    "383": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "385": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "387": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "390": {
      "op": "assert",
      "stack_out": []
    },
    "391": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "393": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "396": {
      "op": "bytec_2 // \"negotiated_price\"",
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"negotiated_price\""
      ]
    },
    "397": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "398": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "399": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "400": {
      "op": "assert",
      "stack_out": []
    },
    "401": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "403": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "405": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "407": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "408": {
      "op": "assert",
      "stack_out": []
    },
    "409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "410": {
      "op": "bytec_0 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "411": {
      "op": "app_global_get_ex",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "413": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyer#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "buyer#0 (copy)"
      ]
    },
    "415": {
      "op": "swap",
      "stack_out": [
        "buyer#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "416": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "418": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "420": {
      "op": "bz purchase_after_if_else@3",
      "stack_out": []
    },
    "423": {
      "op": "itxn_begin"
    },
    "424": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "426": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#1",
        "0"
      ]
    },
    "427": {
      "op": "bytec_0 // \"asset\"",
      "stack_out": [
        "tmp%2#1",
        "0",
        "\"asset\""
      ]
    },
    "428": {
      "op": "app_global_get_ex",
      "stack_out": [
        "tmp%2#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "429": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#1",
        "maybe_value%1#0"
      ]
    },
    "430": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "432": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%0#0",
        "0"
      ]
    },
    "434": {
      "op": "bytec_0 // \"asset\"",
      "stack_out": [
        "value%0#0",
        "0",
        "\"asset\""
      ]
    },
    "435": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "436": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0"
      ]
    },
    "437": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "439": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "441": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "443": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "445": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "447": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": []
    },
    "449": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "450": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "452": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "453": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "455": {
      "op": "itxn_submit"
    },
    "456": {
      "block": "purchase_after_if_else@3",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "457": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "458": {
      "op": "bytec_1 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "459": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "460": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2"
      ]
    },
    "461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#2",
        "0"
      ]
    },
    "462": {
      "op": "bytec_1 // \"seller\"",
      "stack_out": [
        "maybe_value%0#2",
        "0",
        "\"seller\""
      ]
    },
    "463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#2",
        "maybe_value%1#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "maybe_exists%1#0"
      ]
    },
    "464": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2"
      ]
    },
    "465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "0"
      ]
    },
    "466": {
      "op": "bytec_0 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "maybe_value%0#2",
        "maybe_value%1#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "0",
        "\"asset\""
      ]
    },
    "467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#2",
        "maybe_value%1#2",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "468": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "maybe_value%2#0"
      ]
    },
    "469": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#2",
        "maybe_value%1#2",
        "value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "value%0#1",
        "check%0#0"
      ]
    },
    "471": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "value%0#1"
      ]
    },
    "472": {
      "op": "pushbytes \" Sold\"",
      "defined_out": [
        "\" Sold\"",
        "maybe_value%0#2",
        "maybe_value%1#2",
        "value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "value%0#1",
        "\" Sold\""
      ]
    },
    "479": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_Note_idx_0#0",
        "maybe_value%0#2",
        "maybe_value%1#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2",
        "inner_txn_params%0%%param_Note_idx_0#0"
      ]
    },
    "480": {
      "op": "itxn_field Note",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#2"
      ]
    },
    "482": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "maybe_value%0#2"
      ]
    },
    "484": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "486": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "487": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "489": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "490": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "492": {
      "op": "itxn_submit"
    },
    "493": {
      "retsub": true,
      "op": "retsub"
    },
    "494": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.delist",
      "params": {
        "caller#0": "bytes"
      },
      "block": "delist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "497": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "501": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "502": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "503": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "504": {
      "op": "bytec_1 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "505": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "506": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "507": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "caller#0 (copy)"
      ]
    },
    "509": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "510": {
      "error": "only the seller can delist",
      "op": "assert // only the seller can delist",
      "stack_out": []
    },
    "511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "512": {
      "op": "bytec_1 // \"seller\"",
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "514": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "515": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "516": {
      "op": "bytec_1 // \"seller\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"seller\""
      ]
    },
    "517": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "518": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "520": {
      "op": "bytec_0 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"asset\""
      ]
    },
    "521": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "522": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "523": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "524": {
      "op": "bytec_1 // \"seller\"",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"seller\""
      ]
    },
    "525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "526": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "527": {
      "op": "itxn_begin"
    },
    "528": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%3#0"
      ]
    },
    "529": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0"
      ]
    },
    "531": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%4#0",
        "maybe_value%2#0"
      ]
    },
    "532": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%4#0"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%1#0"
      ]
    },
    "535": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "537": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "4"
      ]
    },
    "538": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "0"
      ]
    },
    "541": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "543": {
      "op": "itxn_next"
    },
    "544": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "546": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "547": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "550": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "552": {
      "op": "itxn_submit"
    },
    "553": {
      "retsub": true,
      "op": "retsub"
    },
    "554": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.getInfo",
      "params": {},
      "block": "getInfo",
      "stack_in": [],
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "556": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "557": {
      "op": "bytec_0 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset\""
      ]
    },
    "558": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "559": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "560": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "561": {
      "op": "bytec_0 // \"asset\"",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "0",
        "\"asset\""
      ]
    },
    "562": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "563": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "564": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "566": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0"
      ]
    },
    "567": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "0"
      ]
    },
    "568": {
      "op": "bytec_0 // \"asset\"",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "0",
        "\"asset\""
      ]
    },
    "569": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "570": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "maybe_value%2#0"
      ]
    },
    "571": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%1#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "573": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "574": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "575": {
      "op": "bytec_0 // \"asset\"",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "0",
        "\"asset\""
      ]
    },
    "576": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "577": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "maybe_value%3#0"
      ]
    },
    "578": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "check%2#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "580": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ]
    },
    "581": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0",
        "0"
      ]
    },
    "582": {
      "op": "bytec_1 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "maybe_value%0#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0",
        "0",
        "\"seller\""
      ]
    },
    "583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "584": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0",
        "maybe_value%4#0"
      ]
    },
    "585": {
      "retsub": true,
      "op": "retsub"
    }
  }
}