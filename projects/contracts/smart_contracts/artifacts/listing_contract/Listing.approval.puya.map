{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/constants.ts",
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMoC;AC2BoB;AAAtD;AAJF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAwHG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AApGH;;;AAoGG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAnFH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAmFG;;;AAAA;;AAtBD;;AAAA;AAAA;AAAA;;AAAA;AA7DF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA6DE;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAnDF;;;AAAA;AAmDE;;;AAAA;;AARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA3CH;;;AAAA;AAAA;;AAAA;;;AA2CG;;;AAAA;;AAAD;;;AAEgB;;AAAd;ADnEqB;ACqErB;;AAAA;ADpEsB;ACqEtB;;AAAA;;AAGF;;;AACa;;AAAkB;;AAAtB;AAAP;AD3EgC;AC4EhC;;AAAA;;AAQF;;;AACa;;AAAkB;;AAAtB;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAmB;;AAAuB;;AAA9B;AAApB;AAAP;AAEA;AAE0B;;;;;;AACT;;;;;AAHjB;;;AAKS;;;AALT;;AAiBF;;;AAEa;;AAAkB;;AAAtB;AAAP;AD5GgC;AAAA;AAAA;AAAA;AC6GhC;AAEe;;AAAA;;AAAkB;;AAA1B;AAAP;AACe;;AAAA;;ADhHiB;AAAA;AAAA;AAAA;ACgHzB;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;ADhHqB;AAAA;AAAA;AAAA;ACiCjB;;AAAA;AAAA;;AAAA;;AAAJ;;;AAEE;AAIiD;;ADvC9B;AAAA;AAAA;AAAA;ACuCF;;AAAA;ADvCE;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACmCnB;;;AAMS;;;AANT;AAcgB;ADhDI;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;ACqDM;;AAAA;AAAkB;;;;;;;AAAnC;;;;;AAJQ;;;AAGT;;;AAHS;;AAyEpB;;;AAEa;;AAAkB;;AAAtB;AAAP;AD3HsB;AAAA;AAAA;AAAA;AC4Hf;;AAAA;AAAP;AD5HsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AACC;AAAA;AAAA;AAAA;AC0ItB;;;;;;;;;;AAZsB;;;AAIf;;;AAQyB;;;AALhB;;;AAET;;;AAGP;;AD1IsB;AAAA;AAAA;AAAA;AC+ItB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 5"
    },
    "7": {
      "op": "bytecblock \"seller\" \"asset\" \"negotiated_price\""
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "41": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "44": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\""
      ],
      "stack_out": [
        "\"negotiated_price\""
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"negotiated_price\"",
        "0"
      ],
      "stack_out": [
        "\"negotiated_price\"",
        "0"
      ]
    },
    "46": {
      "op": "app_global_put",
      "stack_out": []
    },
    "47": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "49": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "52": {
      "op": "pushbytess 0x7ce7d8b8 0xa628750d 0xc60bd184 0x52c906ae 0x68e86343 0xdfa148d6 // method \"createApplication(asset,address)void\", method \"recordNegotiatedPrice(uint64)void\", method \"optinToListingAsset(pay,uint64)void\", method \"purchase(pay,address)void\", method \"delist(address)void\", method \"getSeller()address\"",
      "defined_out": [
        "Method(createApplication(asset,address)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(asset,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)"
      ]
    },
    "84": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(asset,address)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(asset,address)void)",
        "Method(recordNegotiatedPrice(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,address)void)",
        "Method(delist(address)void)",
        "Method(getSeller()address)",
        "tmp%2#0"
      ]
    },
    "87": {
      "op": "match main_createApplication_route@5 main_recordNegotiatedPrice_route@6 main_optinToListingAsset_route@7 main_purchase_route@8 main_delist_route@9 main_getSeller_route@10",
      "stack_out": []
    },
    "101": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "block": "main_getSeller_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.getSeller",
      "op": "callsub getSeller",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "113": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0x151f7c75"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%33#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_delist_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "126": {
      "op": "intc_3 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "DeleteApplication"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "128": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "132": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "135": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.delist",
      "op": "callsub delist",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_purchase_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "142": {
      "op": "intc_3 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "DeleteApplication"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "151": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "152": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "153": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "155": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "157": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "161": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.purchase",
      "op": "callsub purchase",
      "stack_out": []
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_optinToListingAsset_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "1"
      ]
    },
    "176": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "178": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "180": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "182": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "186": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%19#0"
      ]
    },
    "187": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset",
      "op": "callsub optinToListingAsset",
      "stack_out": []
    },
    "190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "return",
      "stack_out": []
    },
    "192": {
      "block": "main_recordNegotiatedPrice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "202": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "203": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice",
      "op": "callsub recordNegotiatedPrice",
      "stack_out": []
    },
    "206": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "block": "main_createApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "215": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "220": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "225": {
      "callsub": "smart_contracts/listing_contract/contract.algo.ts::Listing.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "228": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.createApplication",
      "params": {
        "asset#0": "uint64",
        "seller#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "233": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "236": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "237": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "239": {
      "op": "app_global_put",
      "stack_out": []
    },
    "240": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\""
      ],
      "stack_out": [
        "\"seller\""
      ]
    },
    "241": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ],
      "stack_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ]
    },
    "243": {
      "op": "app_global_put",
      "stack_out": []
    },
    "244": {
      "retsub": true,
      "op": "retsub"
    },
    "245": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice",
      "params": {
        "price#0": "uint64"
      },
      "block": "recordNegotiatedPrice",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "248": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "252": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "253": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "254": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\""
      ],
      "stack_out": [
        "\"negotiated_price\""
      ]
    },
    "255": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"negotiated_price\"",
        "price#0 (copy)"
      ],
      "stack_out": [
        "\"negotiated_price\"",
        "price#0 (copy)"
      ]
    },
    "257": {
      "op": "app_global_put",
      "stack_out": []
    },
    "258": {
      "retsub": true,
      "op": "retsub"
    },
    "259": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset",
      "params": {
        "payment#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "optinToListingAsset",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "262": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "267": {
      "error": "optinToListingAsset must be called by creator",
      "op": "assert // optinToListingAsset must be called by creator",
      "stack_out": []
    },
    "268": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "270": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "272": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "274": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "275": {
      "error": "payment receiver must be this app",
      "op": "assert // payment receiver must be this app",
      "stack_out": []
    },
    "276": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "278": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "280": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "282": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "2"
      ]
    },
    "284": {
      "op": "*",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "285": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "286": {
      "error": "payment amount must be asset optin min balance + min account mbr",
      "op": "assert // payment amount must be asset optin min balance + min account mbr",
      "stack_out": []
    },
    "287": {
      "op": "itxn_begin"
    },
    "288": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "290": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0 (copy)"
      ]
    },
    "292": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "294": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "295": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "297": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "299": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "300": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "303": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "305": {
      "op": "itxn_submit"
    },
    "306": {
      "retsub": true,
      "op": "retsub"
    },
    "307": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.purchase",
      "params": {
        "payment#0": "uint64",
        "buyer#0": "bytes"
      },
      "block": "purchase",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "310": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "315": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "316": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "317": {
      "op": "bytec_2 // \"negotiated_price\"",
      "defined_out": [
        "\"negotiated_price\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"negotiated_price\""
      ]
    },
    "318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "319": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "320": {
      "error": "price hasn't been negotiated yet",
      "op": "assert // price hasn't been negotiated yet",
      "stack_out": []
    },
    "321": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "323": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "325": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "327": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "328": {
      "op": "assert",
      "stack_out": []
    },
    "329": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "331": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "333": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "334": {
      "op": "bytec_2 // \"negotiated_price\"",
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"negotiated_price\""
      ]
    },
    "335": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "336": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "337": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "338": {
      "op": "assert",
      "stack_out": []
    },
    "339": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "341": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "343": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "346": {
      "op": "assert",
      "stack_out": []
    },
    "347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "348": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "349": {
      "op": "app_global_get_ex",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "350": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "351": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyer#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "buyer#0 (copy)"
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "buyer#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "354": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "356": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "358": {
      "op": "bz purchase_after_if_else@3",
      "stack_out": []
    },
    "361": {
      "op": "itxn_begin"
    },
    "362": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "364": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#1",
        "0"
      ]
    },
    "365": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "tmp%2#1",
        "0",
        "\"asset\""
      ]
    },
    "366": {
      "op": "app_global_get_ex",
      "stack_out": [
        "tmp%2#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "367": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#1",
        "maybe_value%1#0"
      ]
    },
    "368": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "370": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "371": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%0#0",
        "0"
      ]
    },
    "372": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "value%0#0",
        "0",
        "\"asset\""
      ]
    },
    "373": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "374": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0"
      ]
    },
    "375": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "377": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "379": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "381": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "383": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyer#0 (copy)"
      ]
    },
    "385": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": []
    },
    "387": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "388": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "390": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "391": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "393": {
      "op": "itxn_submit"
    },
    "394": {
      "block": "purchase_after_if_else@3",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "395": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "396": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "397": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "398": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2"
      ]
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#2",
        "0"
      ]
    },
    "400": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "0",
        "\"asset\""
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#2",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "402": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#2",
        "maybe_value%1#0"
      ]
    },
    "403": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#2",
        "value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "value%0#1",
        "check%0#0"
      ]
    },
    "405": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "maybe_value%0#2",
        "value%0#1"
      ]
    },
    "406": {
      "op": "pushbytes \" Sold\"",
      "defined_out": [
        "\" Sold\"",
        "maybe_value%0#2",
        "value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "value%0#1",
        "\" Sold\""
      ]
    },
    "413": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_Note_idx_0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "maybe_value%0#2",
        "inner_txn_params%0%%param_Note_idx_0#0"
      ]
    },
    "414": {
      "op": "itxn_field Note",
      "stack_out": [
        "maybe_value%0#2"
      ]
    },
    "416": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "419": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "421": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "422": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "424": {
      "op": "itxn_submit"
    },
    "425": {
      "retsub": true,
      "op": "retsub"
    },
    "426": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.delist",
      "params": {
        "caller#0": "bytes"
      },
      "block": "delist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "429": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "431": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "433": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "434": {
      "error": "must be called from the factory",
      "op": "assert // must be called from the factory",
      "stack_out": []
    },
    "435": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "436": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "437": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "438": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "439": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "caller#0 (copy)"
      ]
    },
    "441": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "442": {
      "error": "only the seller can delist",
      "op": "assert // only the seller can delist",
      "stack_out": []
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "444": {
      "op": "bytec_0 // \"seller\"",
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "445": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "446": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "447": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "448": {
      "op": "bytec_0 // \"seller\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"seller\""
      ]
    },
    "449": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "450": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "452": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"asset\""
      ]
    },
    "453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "454": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "456": {
      "op": "bytec_0 // \"seller\"",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"seller\""
      ]
    },
    "457": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "458": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "459": {
      "op": "itxn_begin"
    },
    "460": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%3#0"
      ]
    },
    "461": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0"
      ]
    },
    "463": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%4#0",
        "maybe_value%2#0"
      ]
    },
    "464": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%4#0"
      ]
    },
    "466": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%1#0"
      ]
    },
    "467": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "469": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "4"
      ]
    },
    "470": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "0"
      ]
    },
    "473": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "475": {
      "op": "itxn_next"
    },
    "476": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "478": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "479": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "482": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "484": {
      "op": "itxn_submit"
    },
    "485": {
      "retsub": true,
      "op": "retsub"
    },
    "486": {
      "subroutine": "smart_contracts/listing_contract/contract.algo.ts::Listing.getSeller",
      "params": {},
      "block": "getSeller",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "487": {
      "op": "bytec_0 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "488": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "489": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "490": {
      "retsub": true,
      "op": "retsub"
    }
  }
}