#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 5
    bytecblock "asset" "seller" "negotiated_price"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/listing_contract/constants.ts:7
    // export const NEGOTIATED_PRICE_KEY = 'negotiated_price'
    bytec_2 // "negotiated_price"
    // smart_contracts/listing_contract/contract.algo.ts:38
    // negotiatedPrice = GlobalState<uint64>({ initialValue: 0, key: NEGOTIATED_PRICE_KEY })
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    txn NumAppArgs
    bz main_after_if_else@14
    pushbytess 0x7ce7d8b8 0xa628750d 0xc60bd184 0x52c906ae 0x68e86343 0x008c6904 // method "createApplication(asset,address)void", method "recordNegotiatedPrice(uint64)void", method "optinToListingAsset(pay,uint64)void", method "purchase(pay,address)void", method "delist(address)void", method "getInfo()(uint64,uint64,string,string,uint64,address)"
    txna ApplicationArgs 0
    match main_createApplication_route@5 main_recordNegotiatedPrice_route@6 main_optinToListingAsset_route@7 main_purchase_route@8 main_delist_route@9 main_getInfo_route@10

main_after_if_else@14:
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    intc_0 // 0
    return

main_getInfo_route@10:
    // smart_contracts/listing_contract/contract.algo.ts:155
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getInfo
    uncover 5
    itob
    uncover 5
    itob
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    uncover 5
    itob
    uncover 4
    uncover 4
    concat
    pushbytes 0x003c
    concat
    dig 3
    len
    pushint 60 // 60
    +
    itob
    extract 6 2
    concat
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_delist_route@9:
    // smart_contracts/listing_contract/contract.algo.ts:135
    // @abimethod({ allowActions: 'DeleteApplication' })
    txn OnCompletion
    intc_3 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/listing_contract/contract.algo.ts:135
    // @abimethod({ allowActions: 'DeleteApplication' })
    callsub delist
    intc_1 // 1
    return

main_purchase_route@8:
    // smart_contracts/listing_contract/contract.algo.ts:118
    // @abimethod({ allowActions: 'DeleteApplication' })
    txn OnCompletion
    intc_3 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    // smart_contracts/listing_contract/contract.algo.ts:118
    // @abimethod({ allowActions: 'DeleteApplication' })
    callsub purchase
    intc_1 // 1
    return

main_optinToListingAsset_route@7:
    // smart_contracts/listing_contract/contract.algo.ts:96
    // public optinToListingAsset(payment: gtxn.PaymentTxn, asset: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/listing_contract/contract.algo.ts:96
    // public optinToListingAsset(payment: gtxn.PaymentTxn, asset: uint64): void {
    callsub optinToListingAsset
    intc_1 // 1
    return

main_recordNegotiatedPrice_route@6:
    // smart_contracts/listing_contract/contract.algo.ts:86
    // public recordNegotiatedPrice(price: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/listing_contract/contract.algo.ts:86
    // public recordNegotiatedPrice(price: uint64): void {
    callsub recordNegotiatedPrice
    intc_1 // 1
    return

main_createApplication_route@5:
    // smart_contracts/listing_contract/contract.algo.ts:78
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/listing_contract/contract.algo.ts:34
    // export class Listing extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    // smart_contracts/listing_contract/contract.algo.ts:78
    // @abimethod({ onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/listing_contract/contract.algo.ts::Listing.createApplication(asset: uint64, seller: bytes) -> void:
createApplication:
    // smart_contracts/listing_contract/contract.algo.ts:78-79
    // @abimethod({ onCreate: 'require' })
    // public createApplication(asset: Asset, seller: Address): void {
    proto 2 0
    // smart_contracts/listing_contract/contract.algo.ts:80
    // assert(Global.callerApplicationId !== 0, MUST_BE_CALLED_FROM_FACTORY)
    global CallerApplicationID
    assert // must be called from the factory
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    bytec_0 // "asset"
    // smart_contracts/listing_contract/contract.algo.ts:82
    // this.asset.value = asset
    frame_dig -2
    app_global_put
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    bytec_1 // "seller"
    // smart_contracts/listing_contract/contract.algo.ts:83
    // this.seller.value = seller
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/listing_contract/contract.algo.ts::Listing.recordNegotiatedPrice(price: uint64) -> void:
recordNegotiatedPrice:
    // smart_contracts/listing_contract/contract.algo.ts:86
    // public recordNegotiatedPrice(price: uint64): void {
    proto 1 0
    // smart_contracts/listing_contract/contract.algo.ts:87
    // assert(Txn.sender === this.seller.value.native, MUST_BE_CALLED_FROM_FACTORY)
    txn Sender
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:87
    // assert(Txn.sender === this.seller.value.native, MUST_BE_CALLED_FROM_FACTORY)
    ==
    assert // must be called from the factory
    // smart_contracts/listing_contract/constants.ts:7
    // export const NEGOTIATED_PRICE_KEY = 'negotiated_price'
    bytec_2 // "negotiated_price"
    // smart_contracts/listing_contract/contract.algo.ts:88
    // this.negotiatedPrice.value = price
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/listing_contract/contract.algo.ts::Listing.optinToListingAsset(payment: uint64, asset: uint64) -> void:
optinToListingAsset:
    // smart_contracts/listing_contract/contract.algo.ts:96
    // public optinToListingAsset(payment: gtxn.PaymentTxn, asset: uint64): void {
    proto 2 0
    // smart_contracts/listing_contract/contract.algo.ts:97
    // assert(Txn.sender === Global.creatorAddress, 'optinToListingAsset must be called by creator')
    txn Sender
    global CreatorAddress
    ==
    assert // optinToListingAsset must be called by creator
    // smart_contracts/listing_contract/contract.algo.ts:98
    // assert(payment.receiver === Global.currentApplicationAddress, 'payment receiver must be this app')
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // payment receiver must be this app
    // smart_contracts/listing_contract/contract.algo.ts:99
    // assert(payment.amount === (Global.assetOptInMinBalance * 2), 'payment amount must be asset optin min balance + min account mbr')
    frame_dig -2
    gtxns Amount
    global AssetOptInMinBalance
    pushint 2 // 2
    *
    ==
    assert // payment amount must be asset optin min balance + min account mbr
    // smart_contracts/listing_contract/contract.algo.ts:101-108
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_contract/contract.algo.ts:103
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/listing_contract/contract.algo.ts:104
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // smart_contracts/listing_contract/contract.algo.ts:101-107
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: asset,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/listing_contract/contract.algo.ts:106
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_contract/contract.algo.ts:101-108
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/listing_contract/contract.algo.ts::Listing.purchase(payment: uint64, buyer: bytes) -> void:
purchase:
    // smart_contracts/listing_contract/contract.algo.ts:118-119
    // @abimethod({ allowActions: 'DeleteApplication' })
    // public purchase(payment: gtxn.PaymentTxn, buyer: Address): void {
    proto 2 0
    // smart_contracts/listing_contract/contract.algo.ts:120
    // assert(Txn.sender === Global.creatorAddress, MUST_BE_CALLED_FROM_FACTORY)
    txn Sender
    global CreatorAddress
    ==
    assert // must be called from the factory
    // smart_contracts/listing_contract/constants.ts:7
    // export const NEGOTIATED_PRICE_KEY = 'negotiated_price'
    intc_0 // 0
    bytec_2 // "negotiated_price"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:121
    // assert(this.negotiatedPrice.value > 0, PRICE_NOT_NEGOTIATED)
    assert // price hasn't been negotiated yet
    // smart_contracts/listing_contract/contract.algo.ts:123
    // assert(payment.sender === Global.creatorAddress)
    frame_dig -2
    gtxns Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/listing_contract/contract.algo.ts:124
    // assert(payment.amount === this.negotiatedPrice.value)
    frame_dig -2
    gtxns Amount
    // smart_contracts/listing_contract/constants.ts:7
    // export const NEGOTIATED_PRICE_KEY = 'negotiated_price'
    intc_0 // 0
    bytec_2 // "negotiated_price"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:124
    // assert(payment.amount === this.negotiatedPrice.value)
    ==
    assert
    // smart_contracts/listing_contract/contract.algo.ts:125
    // assert(payment.receiver === Global.currentApplicationAddress)
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:45
    // if (buyer.isOptedIn(this.asset.value)) {
    frame_dig -1
    swap
    asset_holding_get AssetBalance
    bury 1
    bz purchase_after_if_else@3
    // smart_contracts/listing_contract/contract.algo.ts:47-55
    // itxn
    //   .assetTransfer({
    //     assetCloseTo: buyer,
    //     assetReceiver: buyer,
    //     assetAmount: this.asset.value.balance(Global.currentApplicationAddress),
    //     xferAsset: this.asset.value,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_contract/contract.algo.ts:51
    // assetAmount: this.asset.value.balance(Global.currentApplicationAddress),
    global CurrentApplicationAddress
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:51
    // assetAmount: this.asset.value.balance(Global.currentApplicationAddress),
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field XferAsset
    itxn_field AssetAmount
    frame_dig -1
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetCloseTo
    // smart_contracts/listing_contract/contract.algo.ts:47-54
    // itxn
    //   .assetTransfer({
    //     assetCloseTo: buyer,
    //     assetReceiver: buyer,
    //     assetAmount: this.asset.value.balance(Global.currentApplicationAddress),
    //     xferAsset: this.asset.value,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/listing_contract/contract.algo.ts:53
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_contract/contract.algo.ts:47-55
    // itxn
    //   .assetTransfer({
    //     assetCloseTo: buyer,
    //     assetReceiver: buyer,
    //     assetAmount: this.asset.value.balance(Global.currentApplicationAddress),
    //     xferAsset: this.asset.value,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

purchase_after_if_else@3:
    // smart_contracts/listing_contract/contract.algo.ts:61-68
    // itxn
    //   .payment({
    //     receiver: this.seller.value.native,
    //     closeRemainderTo: this.seller.value.native,
    //     fee: 0,
    //     note: this.asset.value.name.toString() + ' Sold',
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:66
    // note: this.asset.value.name.toString() + ' Sold',
    asset_params_get AssetName
    assert // asset exists
    pushbytes " Sold"
    concat
    itxn_field Note
    itxn_field CloseRemainderTo
    itxn_field Receiver
    // smart_contracts/listing_contract/contract.algo.ts:61-67
    // itxn
    //   .payment({
    //     receiver: this.seller.value.native,
    //     closeRemainderTo: this.seller.value.native,
    //     fee: 0,
    //     note: this.asset.value.name.toString() + ' Sold',
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/listing_contract/contract.algo.ts:65
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_contract/contract.algo.ts:61-68
    // itxn
    //   .payment({
    //     receiver: this.seller.value.native,
    //     closeRemainderTo: this.seller.value.native,
    //     fee: 0,
    //     note: this.asset.value.name.toString() + ' Sold',
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/listing_contract/contract.algo.ts::Listing.delist(caller: bytes) -> void:
delist:
    // smart_contracts/listing_contract/contract.algo.ts:135-136
    // @abimethod({ allowActions: 'DeleteApplication' })
    // delist(caller: Address): void {
    proto 1 0
    // smart_contracts/listing_contract/contract.algo.ts:137
    // assert(Txn.sender === Global.creatorAddress, MUST_BE_CALLED_FROM_FACTORY)
    txn Sender
    global CreatorAddress
    ==
    assert // must be called from the factory
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:138
    // assert(this.seller.value === caller, ONLY_SELLER_CAN_DELIST)
    frame_dig -1
    ==
    assert // only the seller can delist
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:152
    // itxn.submitGroup(assetTransfer, payment)
    itxn_begin
    swap
    itxn_field XferAsset
    swap
    itxn_field AssetCloseTo
    swap
    itxn_field AssetReceiver
    // smart_contracts/listing_contract/contract.algo.ts:140-145
    // const assetTransfer = itxn.assetTransfer({
    //   assetReceiver: this.seller.value.native,
    //   assetCloseTo: this.seller.value.native,
    //   xferAsset: this.asset.value,
    //   fee: 0,
    // })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/listing_contract/contract.algo.ts:144
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_contract/contract.algo.ts:152
    // itxn.submitGroup(assetTransfer, payment)
    itxn_next
    itxn_field CloseRemainderTo
    // smart_contracts/listing_contract/contract.algo.ts:147-150
    // const payment = itxn.payment({
    //   closeRemainderTo: this.seller.value.native,
    //   fee: 0,
    // })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/listing_contract/contract.algo.ts:149
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_contract/contract.algo.ts:152
    // itxn.submitGroup(assetTransfer, payment)
    itxn_submit
    retsub


// smart_contracts/listing_contract/contract.algo.ts::Listing.getInfo() -> uint64, uint64, bytes, bytes, uint64, bytes:
getInfo:
    // smart_contracts/listing_contract/contract.algo.ts:158
    // id: Global.currentApplicationId.id,
    global CurrentApplicationID
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:160
    // name: String(this.asset.value.name),
    asset_params_get AssetName
    assert // asset exists
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:161
    // unitName: String(this.asset.value.unitName),
    asset_params_get AssetUnitName
    assert // asset exists
    // smart_contracts/listing_contract/constants.ts:8
    // export const ASSET_KEY = 'asset'
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:162
    // decimals: this.asset.value.decimals,
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    intc_0 // 0
    bytec_1 // "seller"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_contract/contract.algo.ts:157-164
    // return {
    //   id: Global.currentApplicationId.id,
    //   assetID: this.asset.value.id,
    //   name: String(this.asset.value.name),
    //   unitName: String(this.asset.value.unitName),
    //   decimals: this.asset.value.decimals,
    //   seller: this.seller.value,
    // }
    retsub
