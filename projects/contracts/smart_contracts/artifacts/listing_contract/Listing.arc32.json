{
    "hints": {
        "createApplication(asset,address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "recordNegotiatedPrice(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optinToListingAsset(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase(pay,address)void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "delist(address)void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "getSeller()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asset": {
                    "type": "uint64",
                    "key": "asset",
                    "descr": "the asset for sale"
                },
                "negotiatedPrice": {
                    "type": "uint64",
                    "key": "negotiated_price"
                },
                "seller": {
                    "type": "bytes",
                    "key": "seller",
                    "descr": "the address selling the asset"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Listing",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "the asa ID that is to be sold"
                    },
                    {
                        "type": "address",
                        "name": "seller",
                        "desc": "the wallet of the account selling the asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "create the listing application"
            },
            {
                "name": "recordNegotiatedPrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "optinToListingAsset",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction"
                    },
                    {
                        "type": "uint64",
                        "name": "asset",
                        "desc": "The asset to be opted into"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "optin tells the contract to opt into an asa"
            },
            {
                "name": "purchase",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "- the payment for purchasing the asset"
                    },
                    {
                        "type": "address",
                        "name": "buyer",
                        "desc": "- the buyer of the asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delist",
                "args": [
                    {
                        "type": "address",
                        "name": "caller"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deletes the app and returns the asset/mbr to the seller"
            },
            {
                "name": "getSeller",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}