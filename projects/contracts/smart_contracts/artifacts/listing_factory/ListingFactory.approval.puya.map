{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_factory/constants.ts",
    "/Users/kylebreeding/algorand/retreat/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_factory/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAkGE;;AAAA;AAAA;AAAA;;AAAA;AAlGF;;;AAAA;AAAA;;AAkGE;;;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAhEF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAgEE;;;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAmBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAHC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;ADvB+B;ACoBhB;;;;AAOd;;AAOF;;;ADlCgC;AAAA;AAAA;AAAA;ACoCgC;;AAArC;AAGV;;AAAA;;AAAR;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AAGiB;;AAAA;;AAAjB;AAAA;AACiB;;AAAA;;AAAyB;;AAAnC;AAAP;AAI0B;AACoB;;AAAS;AAAA;AAApC;;AAAA;;;;;AADO;;;;;;;;;;;;;;;;;;;;AAbF;;;AAAA;;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaE;;;AAAA;;;AAEnB;;;AAFmB;AAGlB;;;AAGsB;AAAA;;AAAA;AACb;;AAKjB;;;;;AAPqB;;;AAGd;;;AAIP;AAE2C;;AAAA;AAF3C;;;;;;;;;;AAAA;;;;;;AAAA;;;AAGO;;;AAHP;AAOA;AAEqC;AAAA;;AAAA;;;;;;;;;;;AAFrC;;;AAKS;;;AALT;AASA;AAGF;;;AACoB;;AAAA;;AAAA;AAAmB;;AAA9B;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAf;AAAA;AAIe;AAAA;;;;;;;;AAAA;;;;;;;AAAA;;;AAER;;;AAFQ;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMQ;;AAAA;;AAAA;AAKvB;;;;;;;AANwB;;;AAGjB;;;AAGP;AAG0C;;AAH1C;;;;;;;;;;;;;;AACiC;;;;AADjC;;;AAIO;;;AAJP;AAOA;ADxG8B;AAAA;AAAA;AAAA;;;;;ACwG9B;;;AAIS;;;AAJT;;AASF;;;AACoB;;AAAA;;AAAA;AAAmB;;AAA9B;AAAP;AAIA;AAGyB;;AAHzB;;;;;;;;;;;;;;AACiC;;;;AADjC;;;AAIO;;;AAJP;AAOA;AD7H8B;AAAA;AAAA;AAAA;ACgIZ;;;;;;AAHlB;;;AAIS;;;AAJT;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6 4"
    },
    "7": {
      "op": "bytecblock \"child_contract_mbr\" 0x151f7c75"
    },
    "33": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "35": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0xb8447b36 0x46f76533 0xe37de7b6 0xf3db1089 0x74f05339 // method \"createApplication()void\", method \"updateApplication()void\", method \"list(pay,axfer,string)uint64\", method \"purchase(pay,application)void\", method \"delist(application)void\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(delist(application)void)",
        "Method(list(pay,axfer,string)uint64)",
        "Method(purchase(pay,application)void)",
        "Method(updateApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(updateApplication()void)",
        "Method(list(pay,axfer,string)uint64)",
        "Method(purchase(pay,application)void)",
        "Method(delist(application)void)"
      ]
    },
    "65": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(delist(application)void)",
        "Method(list(pay,axfer,string)uint64)",
        "Method(purchase(pay,application)void)",
        "Method(updateApplication()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(updateApplication()void)",
        "Method(list(pay,axfer,string)uint64)",
        "Method(purchase(pay,application)void)",
        "Method(delist(application)void)",
        "tmp%2#0"
      ]
    },
    "68": {
      "op": "match main_createApplication_route@3 main_updateApplication_route@4 main_list_route@5 main_purchase_route@6 main_delist_route@7",
      "stack_out": []
    },
    "80": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "block": "main_delist_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "85": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "88": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "89": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "93": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "95": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.delist",
      "op": "callsub delist",
      "stack_out": []
    },
    "98": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "return",
      "stack_out": []
    },
    "100": {
      "block": "main_purchase_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "102": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "103": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "106": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "107": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "109": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "110": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "111": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "112": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "114": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "116": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "120": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%25#0"
      ]
    },
    "121": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%26#0"
      ]
    },
    "123": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.purchase",
      "op": "callsub purchase",
      "stack_out": []
    },
    "126": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "block": "main_list_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "135": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "137": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "2"
      ]
    },
    "139": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "140": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "141": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "143": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "145": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "146": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ]
    },
    "148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "1"
      ]
    },
    "149": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "150": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "151": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "153": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "155": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "156": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%17#0"
      ]
    },
    "159": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%18#0"
      ]
    },
    "162": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.list",
      "op": "callsub list",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "166": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "169": {
      "op": "log",
      "stack_out": []
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "block": "main_updateApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "174": {
      "op": "intc_3 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "UpdateApplication"
      ]
    },
    "175": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "176": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "179": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "return",
      "stack_out": []
    },
    "182": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "184": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "185": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "186": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "189": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "190": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.createApplication",
      "op": "callsub createApplication"
    },
    "193": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "194": {
      "op": "return",
      "stack_out": []
    },
    "195": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\""
      ],
      "stack_out": [
        "\"child_contract_mbr\""
      ]
    },
    "196": {
      "op": "pushint 235500 // 235500",
      "defined_out": [
        "\"child_contract_mbr\"",
        "235500"
      ],
      "stack_out": [
        "\"child_contract_mbr\"",
        "235500"
      ]
    },
    "200": {
      "op": "app_global_put",
      "stack_out": []
    },
    "201": {
      "retsub": true,
      "op": "retsub"
    },
    "202": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.list",
      "params": {
        "payment#0": "uint64",
        "assetXfer#0": "uint64",
        "name#0": "bytes"
      },
      "block": "list",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "205": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "206": {
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"child_contract_mbr\""
      ]
    },
    "207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "208": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "209": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "+",
      "defined_out": [
        "mbrAmount#0"
      ],
      "stack_out": [
        "mbrAmount#0"
      ]
    },
    "212": {
      "op": "frame_dig -3",
      "defined_out": [
        "mbrAmount#0",
        "payment#0 (copy)"
      ],
      "stack_out": [
        "mbrAmount#0",
        "payment#0 (copy)"
      ]
    },
    "214": {
      "op": "gtxns Amount",
      "defined_out": [
        "mbrAmount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "mbrAmount#0",
        "tmp%1#0"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "217": {
      "error": "Payment amount must be equal to MBR amount",
      "op": "assert // Payment amount must be equal to MBR amount",
      "stack_out": []
    },
    "218": {
      "op": "frame_dig -3",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "220": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "222": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "224": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "225": {
      "error": "Payment receiver must be current application address",
      "op": "assert // Payment receiver must be current application address",
      "stack_out": []
    },
    "226": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetXfer#0 (copy)"
      ],
      "stack_out": [
        "assetXfer#0 (copy)"
      ]
    },
    "228": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "230": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "231": {
      "error": "Asset transfer failed",
      "op": "assert // Asset transfer failed",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "232": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%6#0",
        "assetXfer#0 (copy)"
      ]
    },
    "234": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "236": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "238": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%10#0"
      ]
    },
    "239": {
      "error": "Asset transfer failed",
      "op": "assert // Asset transfer failed",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "240": {
      "op": "itxn_begin"
    },
    "241": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%11#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0"
      ]
    },
    "243": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "0"
      ]
    },
    "244": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0"
      ]
    },
    "245": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "assetXfer#0 (copy)"
      ]
    },
    "247": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0"
      ]
    },
    "249": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "250": {
      "op": "itxn_field Assets",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0"
      ]
    },
    "252": {
      "op": "pushbytes 0xc170b9fe // method \"createListingApplication(asset,address,uint64)void\"",
      "defined_out": [
        "Method(createListingApplication(asset,address,uint64)void)",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0",
        "Method(createListingApplication(asset,address,uint64)void)"
      ]
    },
    "258": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0"
      ]
    },
    "260": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0",
        "0x00"
      ]
    },
    "263": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%12#0"
      ]
    },
    "265": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "267": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "tmp%12#0"
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "val_as_bytes%0#0"
      ]
    },
    "270": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "272": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "1"
      ]
    },
    "273": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "275": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "3"
      ]
    },
    "277": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "279": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "CoEBQw=="
      ]
    },
    "285": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "287": {
      "op": "pushbytes base64(CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBMFwuf4Epih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAYCABBUffHVMULAjQzEZJRJEMRhENhoBiAErI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAJojQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gAUyNDMRkURDEYRDYaAReIADUjQzEZFEQxGBRENhoBF8AwNhoCNhoDF4gAAiNDigMAMg1EKYv9ZyiL/meABXByaWNli/9niYoBADEAMgkSRCqL/2eJigIAMQAyCRJEi/44BzIKEkSL/jgIMhASRLEyCov/shEishKyFCSyECKyAbOJigIAMQAyCRJEIiplRESL/jgAMgkSRIv+OAgiKmVEEkSL/jgHMgoSRCIpZUSL/0xwAEUBQQAhsTIKIillRHAARCIpZUSyEbISi/+yFIv/shUkshAisgGzsSIoZUQiKWVEcQREgAUgU29sZFCyBbIJI7IQIrIBs4mKAQAxADIJEkQiKGVEi/8SRCIoZUQiKGVEIillRCIoZUSxTLIRTLIVTLIUJLIQIrIBtrIJI7IQIrIBs4kiKGVEiQ==)",
      "defined_out": [
        "CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBMFwuf4Epih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAYCABBUffHVMULAjQzEZJRJEMRhENhoBiAErI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAJojQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gAUyNDMRkURDEYRDYaAReIADUjQzEZFEQxGBRENhoBF8AwNhoCNhoDF4gAAiNDigMAMg1EKYv9ZyiL/meABXByaWNli/9niYoBADEAMgkSRCqL/2eJigIAMQAyCRJEi/44BzIKEkSL/jgIMhASRLEyCov/shEishKyFCSyECKyAbOJigIAMQAyCRJEIiplRESL/jgAMgkSRIv+OAgiKmVEEkSL/jgHMgoSRCIpZUSL/0xwAEUBQQAhsTIKIillRHAARCIpZUSyEbISi/+yFIv/shUkshAisgGzsSIoZUQiKWVEcQREgAUgU29sZFCyBbIJI7IQIrIBs4mKAQAxADIJEkQiKGVEi/8SRCIoZUQiKGVEIillRCIoZUSxTLIRTLIVTLIUJLIQIrIBtrIJI7IQIrIBs4kiKGVEiQ==",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBMFwuf4Epih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAYCABBUffHVMULAjQzEZJRJEMRhENhoBiAErI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAJojQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gAUyNDMRkURDEYRDYaAReIADUjQzEZFEQxGBRENhoBF8AwNhoCNhoDF4gAAiNDigMAMg1EKYv9ZyiL/meABXByaWNli/9niYoBADEAMgkSRCqL/2eJigIAMQAyCRJEi/44BzIKEkSL/jgIMhASRLEyCov/shEishKyFCSyECKyAbOJigIAMQAyCRJEIiplRESL/jgAMgkSRIv+OAgiKmVEEkSL/jgHMgoSRCIpZUSL/0xwAEUBQQAhsTIKIillRHAARCIpZUSyEbISi/+yFIv/shUkshAisgGzsSIoZUQiKWVEcQREgAUgU29sZFCyBbIJI7IQIrIBs4mKAQAxADIJEkQiKGVEi/8SRCIoZUQiKGVEIillRCIoZUSxTLIRTLIVTLIUJLIQIrIBtrIJI7IQIrIBs4kiKGVEiQ=="
      ]
    },
    "792": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "794": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "0"
      ]
    },
    "795": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "797": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "appl"
      ]
    },
    "798": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "800": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "0"
      ]
    },
    "801": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0"
      ]
    },
    "803": {
      "op": "itxn_submit"
    },
    "804": {
      "op": "gitxn 0 CreatedApplicationID",
      "defined_out": [
        "createdListingApp#0",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "807": {
      "op": "dup",
      "defined_out": [
        "createdListingApp#0",
        "createdListingApp#0 (copy)",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "createdListingApp#0 (copy)"
      ]
    },
    "808": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "createdListingApp#0",
        "tmp%12#0",
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "810": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "value%0#0"
      ]
    },
    "811": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "createdListingApp#0",
        "optInPayment%%param_Amount_idx_0#0",
        "tmp%12#0",
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "value%0#0",
        "optInPayment%%param_Amount_idx_0#0"
      ]
    },
    "813": {
      "op": "itxn_begin"
    },
    "814": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "value%0#0"
      ]
    },
    "816": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "818": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "1"
      ]
    },
    "819": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "821": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "0"
      ]
    },
    "822": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "824": {
      "op": "itxn_next"
    },
    "825": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "tmp%12#0 (copy)"
      ]
    },
    "827": {
      "op": "itob",
      "defined_out": [
        "createdListingApp#0",
        "tmp%12#0",
        "tmp%6#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "val_as_bytes%1#0"
      ]
    },
    "828": {
      "op": "pushbytes 0xc60bd184 // method \"optinToListingAsset(pay,uint64)void\"",
      "defined_out": [
        "Method(optinToListingAsset(pay,uint64)void)",
        "createdListingApp#0",
        "tmp%12#0",
        "tmp%6#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "val_as_bytes%1#0",
        "Method(optinToListingAsset(pay,uint64)void)"
      ]
    },
    "834": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "val_as_bytes%1#0"
      ]
    },
    "836": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "838": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "0"
      ]
    },
    "839": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "841": {
      "op": "dup",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "createdListingApp#0 (copy)"
      ]
    },
    "842": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "844": {
      "op": "intc_2 // appl",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "appl"
      ]
    },
    "845": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "847": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "0"
      ]
    },
    "848": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0"
      ]
    },
    "850": {
      "op": "itxn_submit"
    },
    "851": {
      "op": "itxn_begin"
    },
    "852": {
      "op": "dup",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "createdListingApp#0 (copy)"
      ]
    },
    "853": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "createdListingApp#0",
        "tmp%12#0",
        "tmp%6#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "855": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%6#0",
        "tmp%12#0",
        "createdListingApp#0",
        "value%1#0"
      ]
    },
    "856": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "createdListingApp#0",
        "value%1#0",
        "tmp%12#0"
      ]
    },
    "858": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%6#0",
        "createdListingApp#0",
        "value%1#0"
      ]
    },
    "860": {
      "op": "uncover 2",
      "stack_out": [
        "createdListingApp#0",
        "value%1#0",
        "tmp%6#0"
      ]
    },
    "862": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "createdListingApp#0",
        "value%1#0"
      ]
    },
    "864": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "createdListingApp#0"
      ]
    },
    "866": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "createdListingApp#0"
      ],
      "stack_out": [
        "createdListingApp#0",
        "4"
      ]
    },
    "867": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "createdListingApp#0"
      ]
    },
    "869": {
      "op": "intc_0 // 0",
      "stack_out": [
        "createdListingApp#0",
        "0"
      ]
    },
    "870": {
      "op": "itxn_field Fee",
      "stack_out": [
        "createdListingApp#0"
      ]
    },
    "872": {
      "op": "itxn_submit"
    },
    "873": {
      "retsub": true,
      "op": "retsub"
    },
    "874": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.purchase",
      "params": {
        "payment#0": "uint64",
        "listingApp#0": "uint64"
      },
      "block": "purchase",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "877": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingApp#0 (copy)"
      ],
      "stack_out": [
        "listingApp#0 (copy)"
      ]
    },
    "879": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "881": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "882": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "884": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "885": {
      "error": "Not a listing contract",
      "op": "assert // Not a listing contract",
      "stack_out": []
    },
    "886": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "888": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "890": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "893": {
      "error": "Payment receiver must be current application address",
      "op": "assert // Payment receiver must be current application address",
      "stack_out": []
    },
    "894": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "896": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "898": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "899": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "900": {
      "op": "itxn_begin"
    },
    "901": {
      "op": "pushbytes 0xdfa148d6 // method \"getSeller()address\"",
      "defined_out": [
        "Method(getSeller()address)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(getSeller()address)"
      ]
    },
    "907": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "909": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "910": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "912": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "listingApp#0 (copy)"
      ]
    },
    "914": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "916": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "appl"
      ]
    },
    "917": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "919": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "920": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "922": {
      "op": "itxn_submit"
    },
    "923": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%0#0"
      ]
    },
    "925": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "926": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "seller#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%0#0",
        "seller#0"
      ]
    },
    "929": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "awst_tmp%0#0"
      ]
    },
    "930": {
      "op": "extract 0 4",
      "defined_out": [
        "seller#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "tmp%8#0"
      ]
    },
    "933": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "seller#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "934": {
      "op": "==",
      "defined_out": [
        "seller#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "tmp%9#0"
      ]
    },
    "935": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%5#0",
        "seller#0"
      ]
    },
    "936": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "listingApp#0 (copy)"
      ]
    },
    "938": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "seller#0",
        "tmp%5#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "940": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%5#0",
        "seller#0",
        "value%1#0"
      ]
    },
    "941": {
      "op": "itxn_begin"
    },
    "942": {
      "op": "uncover 2",
      "stack_out": [
        "seller#0",
        "value%1#0",
        "tmp%5#0"
      ]
    },
    "944": {
      "op": "itxn_field Amount",
      "stack_out": [
        "seller#0",
        "value%1#0"
      ]
    },
    "946": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "seller#0"
      ]
    },
    "948": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "1"
      ]
    },
    "949": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "seller#0"
      ]
    },
    "951": {
      "op": "intc_0 // 0",
      "stack_out": [
        "seller#0",
        "0"
      ]
    },
    "952": {
      "op": "itxn_field Fee",
      "stack_out": [
        "seller#0"
      ]
    },
    "954": {
      "op": "itxn_next"
    },
    "955": {
      "op": "txn Sender",
      "defined_out": [
        "seller#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "seller#0",
        "tmp%10#0"
      ]
    },
    "957": {
      "op": "pushbytes 0x52c906ae // method \"purchase(pay,address)void\"",
      "defined_out": [
        "Method(purchase(pay,address)void)",
        "seller#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "seller#0",
        "tmp%10#0",
        "Method(purchase(pay,address)void)"
      ]
    },
    "963": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "seller#0",
        "tmp%10#0"
      ]
    },
    "965": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "seller#0"
      ]
    },
    "967": {
      "op": "frame_dig -1",
      "stack_out": [
        "seller#0",
        "listingApp#0 (copy)"
      ]
    },
    "969": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "seller#0"
      ]
    },
    "971": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "5"
      ]
    },
    "973": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "seller#0"
      ]
    },
    "975": {
      "op": "intc_2 // appl",
      "stack_out": [
        "seller#0",
        "appl"
      ]
    },
    "976": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "seller#0"
      ]
    },
    "978": {
      "op": "intc_0 // 0",
      "stack_out": [
        "seller#0",
        "0"
      ]
    },
    "979": {
      "op": "itxn_field Fee",
      "stack_out": [
        "seller#0"
      ]
    },
    "981": {
      "op": "itxn_submit"
    },
    "982": {
      "op": "itxn_begin"
    },
    "983": {
      "op": "intc_0 // 0",
      "stack_out": [
        "seller#0",
        "0"
      ]
    },
    "984": {
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\"",
        "0",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "0",
        "\"child_contract_mbr\""
      ]
    },
    "985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "seller#0"
      ],
      "stack_out": [
        "seller#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "986": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "seller#0",
        "maybe_value%0#0"
      ]
    },
    "987": {
      "op": "itxn_field Amount"
    },
    "989": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "991": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "992": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "994": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "995": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "997": {
      "op": "itxn_submit"
    },
    "998": {
      "retsub": true,
      "op": "retsub"
    },
    "999": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.delist",
      "params": {
        "listingApp#0": "uint64"
      },
      "block": "delist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1002": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingApp#0 (copy)"
      ],
      "stack_out": [
        "listingApp#0 (copy)"
      ]
    },
    "1004": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1006": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1007": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "1009": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1010": {
      "error": "Not a listing contract",
      "op": "assert // Not a listing contract",
      "stack_out": []
    },
    "1011": {
      "op": "itxn_begin"
    },
    "1012": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1014": {
      "op": "pushbytes 0x68e86343 // method \"delist(address)void\"",
      "defined_out": [
        "Method(delist(address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delist(address)void)"
      ]
    },
    "1020": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1022": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1024": {
      "op": "frame_dig -1",
      "stack_out": [
        "listingApp#0 (copy)"
      ]
    },
    "1026": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1028": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "1030": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "1032": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1033": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1035": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1036": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1038": {
      "op": "itxn_submit"
    },
    "1039": {
      "op": "itxn_begin"
    },
    "1040": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1041": {
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"child_contract_mbr\""
      ]
    },
    "1042": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1043": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1044": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1046": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1048": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "1050": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1051": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1053": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1054": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1056": {
      "op": "itxn_submit"
    },
    "1057": {
      "retsub": true,
      "op": "retsub"
    }
  }
}