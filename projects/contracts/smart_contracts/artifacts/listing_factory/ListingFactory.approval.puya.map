{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_contract/constants.ts",
    "/Users/gabe.algo/Code/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_factory/constants.ts",
    "/Users/gabe.algo/Code/smart-wallet-for-agent-to-agent-interaction/projects/contracts/smart_contracts/listing_factory/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE4BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA2IE;;AAAA;AAAA;AAAA;;AAAA;AA3IF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA2IE;;;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AAhHF;;;AAAA;AAgHE;;;AAAA;;AArCA;;AAAA;AAAA;AAAA;;AAAA;AA3EF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA2EE;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAhEF;;;AAAA;AAAA;;;AAAA;AAgEE;;;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAmBE;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAHC;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AD3B+B;ACwBhB;;;;AAOd;;AAOF;;;ADtCgC;AAAA;AAAA;AAAA;ACwCiC;;AAAuB;AAA9B;AAA/B;AAGV;;AAAA;;AAAR;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AAGiB;;AAAA;;AAAjB;AAAA;AACiB;;AAAA;;AAAyB;;AAAnC;AAAP;AAI0B;AACoB;;AAA3B;;AAAA;;;;;AADO;;;;;;;;;;;;;;;;AAbaE;;;AAAA;;;AAEnB;;;AAFmB;AAGlB;;;AAGsB;AAAA;;AAAA;AACZ;;AAAuB;AAA9B;AAKX;;;;;AAPqB;;;AAGd;;;AAIP;AAE2C;;AAAA;AAF3C;;;;;AAAA;;;;;;AAAA;;;AAGO;;;AAHP;AAOA;AAEqC;AAAA;;AAAA;;;;;;;;;;;AAFrC;;;;AAKS;;;AALT;AASA;AAGF;;;AAEoB;;AAAA;;AAAA;AAAmB;;AAA9B;AAAP;AAEA;AAES;;AAAA;AAFT;;;;;;;;;;AAAA;;;;;;;AAAA;;;AAGO;;;AAHP;;AAOF;;;AAEoB;;AAAA;;AAAA;AAAmB;;AAA9B;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAf;AAAA;AASsB;;AF5GA;;;;;;;;AE4GA;AAAA;AAAA;AAGC;;AAAA;;AAAA;AAKvB;;;;;AANwB;;;AAGjB;;;AAGP;AAG0C;;AAH1C;;;;;;;;;;;;;;AACiC;;;;AADjC;;;AAIO;;;AAJP;AAOA;AD1H8B;AAAA;AAAA;AAAA;;;;;AC0H9B;;;AAIS;;;AAJT;;AASF;;;AAEoB;;AAAA;;AAAA;AAAmB;;AAA9B;AAAP;AAIA;AAGyB;;AAHzB;;;;;;;;;;;;;;AACiC;;;;AADjC;;;AAIO;;;AAJP;AAOA;ADhJ8B;AAAA;AAAA;AAAA;ACmJZ;;;;;;AAHlB;;;AAIS;;;AAJT;;AAcF;;;AACiB;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAkB;;AAA1B;AAAP;AAEA;AAE0B;;;;;;AACT;;;;;AAHjB;;;;AAKS;;;AALT;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6 2"
    },
    "7": {
      "op": "bytecblock \"child_contract_mbr\" 0xc60bd184"
    },
    "33": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "35": {
      "op": "bz main_after_if_else@13",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0xb8447b36 0x46f76533 0x6f506262 0xb6c1684f 0xee02ece7 0xc97dbb2e // method \"createApplication()void\", method \"updateApplication()void\", method \"list(pay,axfer)uint64\", method \"recordNegotiatedPrice(uint64,uint64)void\", method \"purchase(pay,uint64)void\", method \"delist(uint64)void\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(delist(uint64)void)",
        "Method(list(pay,axfer)uint64)",
        "Method(purchase(pay,uint64)void)",
        "Method(recordNegotiatedPrice(uint64,uint64)void)",
        "Method(updateApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(updateApplication()void)",
        "Method(list(pay,axfer)uint64)",
        "Method(recordNegotiatedPrice(uint64,uint64)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(delist(uint64)void)"
      ]
    },
    "70": {
      "op": "bytec_1 // method \"optinToListingAsset(pay,uint64)void\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(delist(uint64)void)",
        "Method(list(pay,axfer)uint64)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(recordNegotiatedPrice(uint64,uint64)void)",
        "Method(updateApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(updateApplication()void)",
        "Method(list(pay,axfer)uint64)",
        "Method(recordNegotiatedPrice(uint64,uint64)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(delist(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)"
      ]
    },
    "71": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(delist(uint64)void)",
        "Method(list(pay,axfer)uint64)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(recordNegotiatedPrice(uint64,uint64)void)",
        "Method(updateApplication()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(updateApplication()void)",
        "Method(list(pay,axfer)uint64)",
        "Method(recordNegotiatedPrice(uint64,uint64)void)",
        "Method(purchase(pay,uint64)void)",
        "Method(delist(uint64)void)",
        "Method(optinToListingAsset(pay,uint64)void)",
        "tmp%2#0"
      ]
    },
    "74": {
      "op": "match main_createApplication_route@3 main_updateApplication_route@4 main_list_route@5 main_recordNegotiatedPrice_route@6 main_purchase_route@7 main_delist_route@8 main_optinToListingAsset_route@9",
      "stack_out": []
    },
    "90": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_optinToListingAsset_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "98": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "99": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "1"
      ]
    },
    "102": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "103": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "104": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "106": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "108": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "112": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%40#0"
      ]
    },
    "113": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.optinToListingAsset",
      "op": "callsub optinToListingAsset",
      "stack_out": []
    },
    "116": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_delist_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "120": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "128": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "129": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.delist",
      "op": "callsub delist",
      "stack_out": []
    },
    "132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "133": {
      "op": "return",
      "stack_out": []
    },
    "134": {
      "block": "main_purchase_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "136": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "137": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "140": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "141": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "143": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "1"
      ]
    },
    "144": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "145": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "146": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "148": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "149": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "150": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "154": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%29#0"
      ]
    },
    "155": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.purchase",
      "op": "callsub purchase",
      "stack_out": []
    },
    "158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    },
    "160": {
      "block": "main_recordNegotiatedPrice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "162": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "163": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "164": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "166": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "167": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "170": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "171": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "174": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "175": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.recordNegotiatedPrice",
      "op": "callsub recordNegotiatedPrice",
      "stack_out": []
    },
    "178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "return",
      "stack_out": []
    },
    "180": {
      "block": "main_list_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "183": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "184": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "186": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "187": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "189": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "2"
      ]
    },
    "190": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "191": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "192": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "194": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "195": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "196": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "197": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ]
    },
    "199": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "1"
      ]
    },
    "200": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "201": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "202": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "204": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "206": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "207": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "208": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.list",
      "op": "callsub list",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "211": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "212": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "220": {
      "op": "log",
      "stack_out": []
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "op": "return",
      "stack_out": []
    },
    "223": {
      "block": "main_updateApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "225": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "UpdateApplication"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "240": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "241": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "242": {
      "callsub": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.createApplication",
      "op": "callsub createApplication"
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\""
      ],
      "stack_out": [
        "\"child_contract_mbr\""
      ]
    },
    "248": {
      "op": "pushint 307000 // 307000",
      "defined_out": [
        "\"child_contract_mbr\"",
        "307000"
      ],
      "stack_out": [
        "\"child_contract_mbr\"",
        "307000"
      ]
    },
    "252": {
      "op": "app_global_put",
      "stack_out": []
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.list",
      "params": {
        "payment#0": "uint64",
        "assetXfer#0": "uint64"
      },
      "block": "list",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "257": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "258": {
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"child_contract_mbr\""
      ]
    },
    "259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "260": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "261": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "263": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "2"
      ]
    },
    "264": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "265": {
      "op": "+",
      "defined_out": [
        "mbrAmount#0"
      ],
      "stack_out": [
        "mbrAmount#0"
      ]
    },
    "266": {
      "op": "frame_dig -2",
      "defined_out": [
        "mbrAmount#0",
        "payment#0 (copy)"
      ],
      "stack_out": [
        "mbrAmount#0",
        "payment#0 (copy)"
      ]
    },
    "268": {
      "op": "gtxns Amount",
      "defined_out": [
        "mbrAmount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "mbrAmount#0",
        "tmp%2#0"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "271": {
      "error": "Payment amount must be equal to MBR amount",
      "op": "assert // Payment amount must be equal to MBR amount",
      "stack_out": []
    },
    "272": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "274": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "276": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "278": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "279": {
      "error": "Payment receiver must be current application address",
      "op": "assert // Payment receiver must be current application address",
      "stack_out": []
    },
    "280": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetXfer#0 (copy)"
      ],
      "stack_out": [
        "assetXfer#0 (copy)"
      ]
    },
    "282": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "284": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "285": {
      "error": "Asset transfer failed",
      "op": "assert // Asset transfer failed",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "286": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "assetXfer#0 (copy)"
      ]
    },
    "288": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "290": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "292": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "293": {
      "error": "Asset transfer failed",
      "op": "assert // Asset transfer failed",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "294": {
      "op": "itxn_begin"
    },
    "295": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0"
      ]
    },
    "297": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "assetXfer#0 (copy)"
      ]
    },
    "299": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "301": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "302": {
      "op": "itxn_field Assets",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "304": {
      "op": "pushbytes 0x7ce7d8b8 // method \"createApplication(asset,address)void\"",
      "defined_out": [
        "Method(createApplication(asset,address)void)",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0",
        "Method(createApplication(asset,address)void)"
      ]
    },
    "310": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "312": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0",
        "0x00"
      ]
    },
    "315": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "tmp%12#0"
      ]
    },
    "318": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "320": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "1"
      ]
    },
    "321": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "323": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "2"
      ]
    },
    "324": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "326": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "CoEBQw=="
      ]
    },
    "332": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "334": {
      "op": "pushbytes base64(CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBHzn2LgEpih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAXWABBUffHVMULAjQzEZJRJEMRhENhoBiAEgI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAI8jQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gARSNDMRkURDEYRDYaAReIACcjQzEZFEQxGBRENhoBF8AwNhoCiAACI0OKAgAyDUQpi/5nKIv/Z4mKAQAxADIJEkQqi/9niYoCADEAMgkSRIv+OAcyChJEi/44CDIQgQILEkSxMgqL/7IRIrISshQkshAisgGziYoCADEAMgkSRCIqZUREi/44ADIJEkSL/jgIIiplRBJEi/44BzIKEkQiKWVEi/9McABFAUEAIbEyCiIpZURwAEQiKWVEshGyEov/shSL/7IVJLIQIrIBs7EiKGVEIillRHEERIAFIFNvbGRQsgWyCSOyECKyAbOJigEAMQAyCRJEIihlRIv/EkQiKGVEIihlRCIpZUQiKGVEsUyyEUyyFUyyFCSyECKyAbayCSOyECKyAbOJIihlRIk=)",
      "defined_out": [
        "CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBHzn2LgEpih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAXWABBUffHVMULAjQzEZJRJEMRhENhoBiAEgI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAI8jQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gARSNDMRkURDEYRDYaAReIACcjQzEZFEQxGBRENhoBF8AwNhoCiAACI0OKAgAyDUQpi/5nKIv/Z4mKAQAxADIJEkQqi/9niYoCADEAMgkSRIv+OAcyChJEi/44CDIQgQILEkSxMgqL/7IRIrISshQkshAisgGziYoCADEAMgkSRCIqZUREi/44ADIJEkSL/jgIIiplRBJEi/44BzIKEkQiKWVEi/9McABFAUEAIbEyCiIpZURwAEQiKWVEshGyEov/shSL/7IVJLIQIrIBs7EiKGVEIillRHEERIAFIFNvbGRQsgWyCSOyECKyAbOJigEAMQAyCRJEIihlRIv/EkQiKGVEIihlRCIpZUQiKGVEsUyyEUyyFUyyFCSyECKyAbayCSOyECKyAbOJIihlRIk=",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBHzn2LgEpih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAXWABBUffHVMULAjQzEZJRJEMRhENhoBiAEgI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAI8jQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gARSNDMRkURDEYRDYaAReIACcjQzEZFEQxGBRENhoBF8AwNhoCiAACI0OKAgAyDUQpi/5nKIv/Z4mKAQAxADIJEkQqi/9niYoCADEAMgkSRIv+OAcyChJEi/44CDIQgQILEkSxMgqL/7IRIrISshQkshAisgGziYoCADEAMgkSRCIqZUREi/44ADIJEkSL/jgIIiplRBJEi/44BzIKEkQiKWVEi/9McABFAUEAIbEyCiIpZURwAEQiKWVEshGyEov/shSL/7IVJLIQIrIBs7EiKGVEIillRHEERIAFIFNvbGRQsgWyCSOyECKyAbOJigEAMQAyCRJEIihlRIv/EkQiKGVEIihlRCIpZUQiKGVEsUyyEUyyFUyyFCSyECKyAbayCSOyECKyAbOJIihlRIk="
      ]
    },
    "828": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "830": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "0"
      ]
    },
    "831": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "833": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "834": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "836": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "0"
      ]
    },
    "837": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "839": {
      "op": "itxn_submit"
    },
    "840": {
      "op": "gitxn 0 CreatedApplicationID",
      "defined_out": [
        "createdListingApp#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "843": {
      "op": "dup",
      "defined_out": [
        "createdListingApp#0",
        "createdListingApp#0 (copy)",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "createdListingApp#0 (copy)"
      ]
    },
    "844": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "createdListingApp#0",
        "tmp%13#0",
        "tmp%7#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "846": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%0#0"
      ]
    },
    "847": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "createdListingApp#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%7#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%0#0",
        "tmp%14#0"
      ]
    },
    "849": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%0#0",
        "tmp%14#0",
        "2"
      ]
    },
    "850": {
      "op": "*",
      "defined_out": [
        "createdListingApp#0",
        "optInPayment%%param_Amount_idx_0#0",
        "tmp%13#0",
        "tmp%7#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%0#0",
        "optInPayment%%param_Amount_idx_0#0"
      ]
    },
    "851": {
      "op": "itxn_begin"
    },
    "852": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%0#0"
      ]
    },
    "854": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "856": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "1"
      ]
    },
    "857": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "859": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "0"
      ]
    },
    "860": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "862": {
      "op": "itxn_next"
    },
    "863": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "tmp%13#0 (copy)"
      ]
    },
    "865": {
      "op": "itob",
      "defined_out": [
        "createdListingApp#0",
        "tmp%13#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "val_as_bytes%0#0"
      ]
    },
    "866": {
      "op": "bytec_1 // method \"optinToListingAsset(pay,uint64)void\"",
      "defined_out": [
        "Method(optinToListingAsset(pay,uint64)void)",
        "createdListingApp#0",
        "tmp%13#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "val_as_bytes%0#0",
        "Method(optinToListingAsset(pay,uint64)void)"
      ]
    },
    "867": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "val_as_bytes%0#0"
      ]
    },
    "869": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "0"
      ]
    },
    "872": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "874": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "createdListingApp#0 (copy)"
      ]
    },
    "875": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "877": {
      "op": "intc_2 // appl",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "appl"
      ]
    },
    "878": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "880": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "0"
      ]
    },
    "881": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0"
      ]
    },
    "883": {
      "op": "itxn_submit"
    },
    "884": {
      "op": "itxn_begin"
    },
    "885": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "createdListingApp#0 (copy)"
      ]
    },
    "886": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "createdListingApp#0",
        "tmp%13#0",
        "tmp%7#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "888": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%7#0",
        "tmp%13#0",
        "createdListingApp#0",
        "value%1#0"
      ]
    },
    "889": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "createdListingApp#0",
        "value%1#0",
        "tmp%13#0"
      ]
    },
    "891": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%7#0",
        "createdListingApp#0",
        "value%1#0"
      ]
    },
    "893": {
      "op": "uncover 2",
      "stack_out": [
        "createdListingApp#0",
        "value%1#0",
        "tmp%7#0"
      ]
    },
    "895": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "createdListingApp#0",
        "value%1#0"
      ]
    },
    "897": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "createdListingApp#0"
      ]
    },
    "899": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "createdListingApp#0"
      ],
      "stack_out": [
        "createdListingApp#0",
        "4"
      ]
    },
    "901": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "createdListingApp#0"
      ]
    },
    "903": {
      "op": "intc_0 // 0",
      "stack_out": [
        "createdListingApp#0",
        "0"
      ]
    },
    "904": {
      "op": "itxn_field Fee",
      "stack_out": [
        "createdListingApp#0"
      ]
    },
    "906": {
      "op": "itxn_submit"
    },
    "907": {
      "retsub": true,
      "op": "retsub"
    },
    "908": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.recordNegotiatedPrice",
      "params": {
        "price#0": "uint64",
        "listingAppId#0": "uint64"
      },
      "block": "recordNegotiatedPrice",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "911": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingAppId#0 (copy)"
      ],
      "stack_out": [
        "listingAppId#0 (copy)"
      ]
    },
    "913": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "915": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "916": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "918": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "919": {
      "error": "Not a listing contract",
      "op": "assert // Not a listing contract",
      "stack_out": []
    },
    "920": {
      "op": "itxn_begin"
    },
    "921": {
      "op": "frame_dig -2",
      "defined_out": [
        "price#0 (copy)"
      ],
      "stack_out": [
        "price#0 (copy)"
      ]
    },
    "923": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "924": {
      "op": "pushbytes 0xa628750d // method \"recordNegotiatedPrice(uint64)void\"",
      "defined_out": [
        "Method(recordNegotiatedPrice(uint64)void)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "Method(recordNegotiatedPrice(uint64)void)"
      ]
    },
    "930": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "932": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "934": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "935": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "937": {
      "op": "frame_dig -1",
      "stack_out": [
        "listingAppId#0 (copy)"
      ]
    },
    "939": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "941": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "942": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "944": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "945": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "947": {
      "op": "itxn_submit"
    },
    "948": {
      "retsub": true,
      "op": "retsub"
    },
    "949": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.purchase",
      "params": {
        "payment#0": "uint64",
        "listingAppId#0": "uint64"
      },
      "block": "purchase",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "952": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingAppId#0 (copy)"
      ],
      "stack_out": [
        "listingAppId#0 (copy)"
      ]
    },
    "954": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "956": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "957": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "959": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "960": {
      "error": "Not a listing contract",
      "op": "assert // Not a listing contract",
      "stack_out": []
    },
    "961": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "963": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "965": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "967": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "968": {
      "error": "Payment receiver must be current application address",
      "op": "assert // Payment receiver must be current application address",
      "stack_out": []
    },
    "969": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "971": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "973": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "974": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "975": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "listingAppId#0 (copy)"
      ]
    },
    "977": {
      "op": "pushbytes \"seller\"",
      "defined_out": [
        "\"seller\"",
        "listingAppId#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "listingAppId#0 (copy)",
        "\"seller\""
      ]
    },
    "985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_#0",
        "sellerBytes#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sellerBytes#0",
        "_#0"
      ]
    },
    "986": {
      "op": "pop",
      "stack_out": [
        "tmp%5#0",
        "sellerBytes#0"
      ]
    },
    "987": {
      "op": "swap",
      "stack_out": [
        "sellerBytes#0",
        "tmp%5#0"
      ]
    },
    "988": {
      "op": "frame_dig -1",
      "stack_out": [
        "sellerBytes#0",
        "tmp%5#0",
        "listingAppId#0 (copy)"
      ]
    },
    "990": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "sellerBytes#0",
        "tmp%5#0",
        "value%1#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "tmp%5#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "992": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "sellerBytes#0",
        "tmp%5#0",
        "value%1#0"
      ]
    },
    "993": {
      "op": "itxn_begin"
    },
    "994": {
      "op": "itxn_field Receiver"
    },
    "996": {
      "op": "itxn_field Amount",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "998": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sellerBytes#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "1"
      ]
    },
    "999": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1001": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "sellerBytes#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "0"
      ]
    },
    "1002": {
      "op": "itxn_field Fee",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1004": {
      "op": "itxn_next"
    },
    "1005": {
      "op": "txn Sender",
      "defined_out": [
        "sellerBytes#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "tmp%7#0"
      ]
    },
    "1007": {
      "op": "pushbytes 0x52c906ae // method \"purchase(pay,address)void\"",
      "defined_out": [
        "Method(purchase(pay,address)void)",
        "sellerBytes#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "tmp%7#0",
        "Method(purchase(pay,address)void)"
      ]
    },
    "1013": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "sellerBytes#0",
        "tmp%7#0"
      ]
    },
    "1015": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1017": {
      "op": "frame_dig -1",
      "stack_out": [
        "sellerBytes#0",
        "listingAppId#0 (copy)"
      ]
    },
    "1019": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1021": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "sellerBytes#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "5"
      ]
    },
    "1023": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1025": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "sellerBytes#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "appl"
      ]
    },
    "1026": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1028": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sellerBytes#0",
        "0"
      ]
    },
    "1029": {
      "op": "itxn_field Fee",
      "stack_out": [
        "sellerBytes#0"
      ]
    },
    "1031": {
      "op": "itxn_submit"
    },
    "1032": {
      "op": "itxn_begin"
    },
    "1033": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sellerBytes#0",
        "0"
      ]
    },
    "1034": {
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\"",
        "0",
        "sellerBytes#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "0",
        "\"child_contract_mbr\""
      ]
    },
    "1035": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sellerBytes#0"
      ],
      "stack_out": [
        "sellerBytes#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1036": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sellerBytes#0",
        "maybe_value%0#0"
      ]
    },
    "1037": {
      "op": "itxn_field Amount"
    },
    "1039": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "1041": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1042": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1045": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1047": {
      "op": "itxn_submit"
    },
    "1048": {
      "retsub": true,
      "op": "retsub"
    },
    "1049": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.delist",
      "params": {
        "listingAppId#0": "uint64"
      },
      "block": "delist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1052": {
      "op": "frame_dig -1",
      "defined_out": [
        "listingAppId#0 (copy)"
      ],
      "stack_out": [
        "listingAppId#0 (copy)"
      ]
    },
    "1054": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1056": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1057": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "1059": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1060": {
      "error": "Not a listing contract",
      "op": "assert // Not a listing contract",
      "stack_out": []
    },
    "1061": {
      "op": "itxn_begin"
    },
    "1062": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1064": {
      "op": "pushbytes 0x68e86343 // method \"delist(address)void\"",
      "defined_out": [
        "Method(delist(address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delist(address)void)"
      ]
    },
    "1070": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1072": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1074": {
      "op": "frame_dig -1",
      "stack_out": [
        "listingAppId#0 (copy)"
      ]
    },
    "1076": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1078": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "1080": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "1082": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1083": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1085": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1086": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1088": {
      "op": "itxn_submit"
    },
    "1089": {
      "op": "itxn_begin"
    },
    "1090": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1091": {
      "op": "bytec_0 // \"child_contract_mbr\"",
      "defined_out": [
        "\"child_contract_mbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"child_contract_mbr\""
      ]
    },
    "1092": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1093": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1094": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1096": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1098": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "1100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1101": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1104": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1106": {
      "op": "itxn_submit"
    },
    "1107": {
      "retsub": true,
      "op": "retsub"
    },
    "1108": {
      "subroutine": "smart_contracts/listing_factory/contract.algo.ts::ListingFactory.optinToListingAsset",
      "params": {
        "payment#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "optinToListingAsset",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1111": {
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1113": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1115": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1117": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1118": {
      "op": "assert",
      "stack_out": []
    },
    "1119": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1121": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1123": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1125": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1126": {
      "op": "assert",
      "stack_out": []
    },
    "1127": {
      "op": "itxn_begin"
    },
    "1128": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1130": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0 (copy)"
      ]
    },
    "1132": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1135": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1137": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1139": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1141": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1143": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1144": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1146": {
      "op": "itxn_submit"
    },
    "1147": {
      "retsub": true,
      "op": "retsub"
    }
  }
}