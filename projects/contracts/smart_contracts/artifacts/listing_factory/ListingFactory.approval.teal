#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2 4
    bytecblock "child_contract_mbr" 0xc60bd184
    // smart_contracts/listing_factory/contract.algo.ts:33
    // export class ListingFactory extends Contract {
    txn NumAppArgs
    bz main_after_if_else@12
    pushbytess 0xb8447b36 0x46f76533 0x6f506262 0xee02ece7 0xc97dbb2e // method "createApplication()void", method "updateApplication()void", method "list(pay,axfer)uint64", method "purchase(pay,uint64)void", method "delist(uint64)void"
    bytec_1 // method "optinToListingAsset(pay,uint64)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_updateApplication_route@4 main_list_route@5 main_purchase_route@6 main_delist_route@7 main_optinToListingAsset_route@8

main_after_if_else@12:
    // smart_contracts/listing_factory/contract.algo.ts:33
    // export class ListingFactory extends Contract {
    intc_0 // 0
    return

main_optinToListingAsset_route@8:
    // smart_contracts/listing_factory/contract.algo.ts:156
    // public optinToListingAsset(payment: gtxn.PaymentTxn, asset: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_factory/contract.algo.ts:33
    // export class ListingFactory extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/listing_factory/contract.algo.ts:156
    // public optinToListingAsset(payment: gtxn.PaymentTxn, asset: uint64): void {
    callsub optinToListingAsset
    intc_1 // 1
    return

main_delist_route@7:
    // smart_contracts/listing_factory/contract.algo.ts:129
    // delist(listingAppId: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_factory/contract.algo.ts:33
    // export class ListingFactory extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/listing_factory/contract.algo.ts:129
    // delist(listingAppId: uint64): void {
    callsub delist
    intc_1 // 1
    return

main_purchase_route@6:
    // smart_contracts/listing_factory/contract.algo.ts:97
    // purchase(payment: gtxn.PaymentTxn, listingAppId: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_factory/contract.algo.ts:33
    // export class ListingFactory extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/listing_factory/contract.algo.ts:97
    // purchase(payment: gtxn.PaymentTxn, listingAppId: uint64): void {
    callsub purchase
    intc_1 // 1
    return

main_list_route@5:
    // smart_contracts/listing_factory/contract.algo.ts:52
    // public list(payment: gtxn.PaymentTxn, assetXfer: gtxn.AssetTransferTxn): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/listing_factory/contract.algo.ts:33
    // export class ListingFactory extends Contract {
    txn GroupIndex
    intc_2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/listing_factory/contract.algo.ts:52
    // public list(payment: gtxn.PaymentTxn, assetXfer: gtxn.AssetTransferTxn): uint64 {
    callsub list
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_updateApplication_route@4:
    // smart_contracts/listing_factory/contract.algo.ts:49
    // @abimethod({ allowActions: 'UpdateApplication' })
    txn OnCompletion
    intc_3 // UpdateApplication
    ==
    assert // OnCompletion is not UpdateApplication
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/listing_factory/contract.algo.ts:41
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/listing_factory/contract.algo.ts::ListingFactory.createApplication() -> void:
createApplication:
    // smart_contracts/listing_factory/constants.ts:10
    // export const CHILD_CONTRACT_MBR = 'child_contract_mbr'
    bytec_0 // "child_contract_mbr"
    // smart_contracts/listing_factory/contract.algo.ts:38
    // return Uint64(100_000 + 28_500 * globalUints + 50_000 * globalBytes)
    pushint 207000 // 207000
    // smart_contracts/listing_factory/contract.algo.ts:45
    // this.childContractMBR.value = childContractMBR
    app_global_put
    retsub


// smart_contracts/listing_factory/contract.algo.ts::ListingFactory.list(payment: uint64, assetXfer: uint64) -> uint64:
list:
    // smart_contracts/listing_factory/contract.algo.ts:52
    // public list(payment: gtxn.PaymentTxn, assetXfer: gtxn.AssetTransferTxn): uint64 {
    proto 2 1
    // smart_contracts/listing_factory/constants.ts:10
    // export const CHILD_CONTRACT_MBR = 'child_contract_mbr'
    intc_0 // 0
    bytec_0 // "child_contract_mbr"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_factory/contract.algo.ts:54
    // const mbrAmount = Uint64(this.childContractMBR.value + (Global.assetOptInMinBalance * 2))
    global AssetOptInMinBalance
    intc_2 // 2
    *
    +
    // smart_contracts/listing_factory/contract.algo.ts:57
    // assert(payment.amount === mbrAmount, PAYMENT_AMOUNT_MUST_BE_EQUAL_TO_MBR_AMOUNT)
    frame_dig -2
    gtxns Amount
    ==
    assert // Payment amount must be equal to MBR amount
    // smart_contracts/listing_factory/contract.algo.ts:58
    // assert(payment.receiver === Global.currentApplicationAddress, PAYMENT_RECEIVER_MUST_BE_CURRENT_APPLICATION_ADDRESS)
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment receiver must be current application address
    // smart_contracts/listing_factory/contract.algo.ts:61
    // assert(assetXfer.assetAmount > 0, ASSET_TRANSFER_FAILED)
    frame_dig -1
    gtxns AssetAmount
    dup
    assert // Asset transfer failed
    // smart_contracts/listing_factory/contract.algo.ts:62
    // assert(assetXfer.assetReceiver === Global.currentApplicationAddress, ASSET_TRANSFER_FAILED)
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Asset transfer failed
    // smart_contracts/listing_factory/contract.algo.ts:66-69
    // const createdListingApp = listingContract.call.createApplication({
    //   args: [assetXfer.xferAsset, new Address(Txn.sender)],
    //   fee: 0,
    // }).itxn.createdApp
    itxn_begin
    // smart_contracts/listing_factory/contract.algo.ts:67
    // args: [assetXfer.xferAsset, new Address(Txn.sender)],
    txn Sender
    frame_dig -1
    gtxns XferAsset
    dup
    itxn_field Assets
    // smart_contracts/listing_factory/contract.algo.ts:66-69
    // const createdListingApp = listingContract.call.createApplication({
    //   args: [assetXfer.xferAsset, new Address(Txn.sender)],
    //   fee: 0,
    // }).itxn.createdApp
    pushbytes 0x7ce7d8b8 // method "createApplication(asset,address)void"
    itxn_field ApplicationArgs
    pushbytes 0x00
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    // smart_contracts/listing_factory/contract.algo.ts:53
    // const listingContract = compileArc4(Listing)
    intc_1 // 1
    itxn_field GlobalNumByteSlice
    intc_2 // 2
    itxn_field GlobalNumUint
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiAEAAEEBSYDBWFzc2V0BnNlbGxlchBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBHzn2LgEpih1DQTGC9GEBFLJBq4EaOhjQwQAjGkENhoAjgYApwCXAH0AYwBTAAIiQzEZFEQxGESIAblPBRZPBRZLBRUWVwYCTwZQSwUVFlcGAk8GUE8FFk8ETwRQgAIAPFBLAxWBPAgWVwYCUExQTwNQTwJQTFCABBUffHVMULAjQzEZJRJEMRhENhoBiAEoI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAJEjQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gARyNDMRkURDEYRDYaAReIACcjQzEZFEQxGBRENhoBF8AwNhoCiAACI0OKAgAyDUQoi/5nKYv/Z4mKAQAxACIpZUQSRCqL/2eJigIAMQAyCRJEi/44BzIKEkSL/jgIMhCBAgsSRLEyCov/shEishKyFCSyECKyAbOJigIAMQAyCRJEIiplRESL/jgAMgkSRIv+OAgiKmVEEkSL/jgHMgoSRCIoZUSL/0xwAEUBQQAhsTIKIihlRHAARCIoZUSyEbISi/+yFIv/shUkshAisgGzsSIpZUQiKWVEIihlRHEERIAFIFNvbGRQsgWyCbIHI7IQIrIBs4mKAQAxADIJEkQiKWVEi/8SRCIpZUQiKWVEIihlRCIpZUSxTLIRTLIVTLIUJLIQIrIBtrIJI7IQIrIBs4kyCCIoZUQiKGVEcQREIihlRHEDRCIoZURxAUQiKWVEiQ==)
    itxn_field ApprovalProgramPages
    // smart_contracts/listing_factory/contract.algo.ts:66-69
    // const createdListingApp = listingContract.call.createApplication({
    //   args: [assetXfer.xferAsset, new Address(Txn.sender)],
    //   fee: 0,
    // }).itxn.createdApp
    intc_0 // 0
    itxn_field OnCompletion
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:68
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:66-69
    // const createdListingApp = listingContract.call.createApplication({
    //   args: [assetXfer.xferAsset, new Address(Txn.sender)],
    //   fee: 0,
    // }).itxn.createdApp
    itxn_submit
    // smart_contracts/listing_factory/contract.algo.ts:69
    // }).itxn.createdApp
    gitxn 0 CreatedApplicationID
    // smart_contracts/listing_factory/contract.algo.ts:72
    // receiver: createdListingApp.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/listing_factory/contract.algo.ts:73
    // amount: (Global.assetOptInMinBalance * 2),
    global AssetOptInMinBalance
    intc_2 // 2
    *
    // smart_contracts/listing_factory/contract.algo.ts:78-82
    // listingContract.call.optinToListingAsset({
    //   appId: createdListingApp.id,
    //   args: [optInPayment, assetXfer.xferAsset.id],
    //   fee: 0,
    // })
    itxn_begin
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/listing_factory/contract.algo.ts:71-75
    // const optInPayment = itxn.payment({
    //   receiver: createdListingApp.address,
    //   amount: (Global.assetOptInMinBalance * 2),
    //   fee: 0,
    // })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:74
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:78-82
    // listingContract.call.optinToListingAsset({
    //   appId: createdListingApp.id,
    //   args: [optInPayment, assetXfer.xferAsset.id],
    //   fee: 0,
    // })
    itxn_next
    // smart_contracts/listing_factory/contract.algo.ts:80
    // args: [optInPayment, assetXfer.xferAsset.id],
    dig 1
    itob
    // smart_contracts/listing_factory/contract.algo.ts:78-82
    // listingContract.call.optinToListingAsset({
    //   appId: createdListingApp.id,
    //   args: [optInPayment, assetXfer.xferAsset.id],
    //   fee: 0,
    // })
    bytec_1 // method "optinToListingAsset(pay,uint64)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:81
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:78-82
    // listingContract.call.optinToListingAsset({
    //   appId: createdListingApp.id,
    //   args: [optInPayment, assetXfer.xferAsset.id],
    //   fee: 0,
    // })
    itxn_submit
    // smart_contracts/listing_factory/contract.algo.ts:85-92
    // itxn
    //   .assetTransfer({
    //     assetReceiver: createdListingApp.address,
    //     assetAmount: assetXfer.assetAmount,
    //     xferAsset: assetXfer.xferAsset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_factory/contract.algo.ts:87
    // assetReceiver: createdListingApp.address,
    dup
    app_params_get AppAddress
    assert // application exists
    uncover 2
    itxn_field XferAsset
    uncover 2
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // smart_contracts/listing_factory/contract.algo.ts:85-91
    // itxn
    //   .assetTransfer({
    //     assetReceiver: createdListingApp.address,
    //     assetAmount: assetXfer.assetAmount,
    //     xferAsset: assetXfer.xferAsset,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:90
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:85-92
    // itxn
    //   .assetTransfer({
    //     assetReceiver: createdListingApp.address,
    //     assetAmount: assetXfer.assetAmount,
    //     xferAsset: assetXfer.xferAsset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/listing_factory/contract.algo.ts:94
    // return createdListingApp.id
    retsub


// smart_contracts/listing_factory/contract.algo.ts::ListingFactory.purchase(payment: uint64, listingAppId: uint64) -> void:
purchase:
    // smart_contracts/listing_factory/contract.algo.ts:97
    // purchase(payment: gtxn.PaymentTxn, listingAppId: uint64): void {
    proto 2 0
    // smart_contracts/listing_factory/contract.algo.ts:99
    // assert(listingApp.creator === Global.currentApplicationAddress, NOT_A_LISTING)
    frame_dig -1
    app_params_get AppCreator
    assert // application exists
    global CurrentApplicationAddress
    ==
    assert // Not a listing contract
    // smart_contracts/listing_factory/contract.algo.ts:100
    // assert(payment.receiver === Global.currentApplicationAddress, PAYMENT_RECEIVER_MUST_BE_CURRENT_APPLICATION_ADDRESS)
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment receiver must be current application address
    // smart_contracts/listing_factory/contract.algo.ts:101
    // assert(payment.amount > 0, PAYMENT_AMOUNT_MUST_BE_GREATER_THAN_0)
    frame_dig -2
    gtxns Amount
    dup
    assert // Payment amount must be greater than 0
    // smart_contracts/listing_factory/contract.algo.ts:105
    // const [sellerBytes] = op.AppGlobal.getExBytes(listingApp, Bytes(SELLER_KEY))
    frame_dig -1
    // smart_contracts/listing_contract/constants.ts:9
    // export const SELLER_KEY = 'seller'
    pushbytes "seller"
    // smart_contracts/listing_factory/contract.algo.ts:105
    // const [sellerBytes] = op.AppGlobal.getExBytes(listingApp, Bytes(SELLER_KEY))
    app_global_get_ex
    pop
    swap
    // smart_contracts/listing_factory/contract.algo.ts:108
    // receiver: listingApp.address,
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/listing_factory/contract.algo.ts:113-118
    // listingContract.call.purchase({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [purchasePayment, new Address(Txn.sender)],
    //   fee: 0,
    // })
    itxn_begin
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/listing_factory/contract.algo.ts:107-111
    // const purchasePayment = itxn.payment({
    //   receiver: listingApp.address,
    //   amount: payment.amount,
    //   fee: 0,
    // })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:110
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:113-118
    // listingContract.call.purchase({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [purchasePayment, new Address(Txn.sender)],
    //   fee: 0,
    // })
    itxn_next
    // smart_contracts/listing_factory/contract.algo.ts:116
    // args: [purchasePayment, new Address(Txn.sender)],
    txn Sender
    // smart_contracts/listing_factory/contract.algo.ts:113-118
    // listingContract.call.purchase({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [purchasePayment, new Address(Txn.sender)],
    //   fee: 0,
    // })
    pushbytes 0x52c906ae // method "purchase(pay,address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    // smart_contracts/listing_factory/contract.algo.ts:114
    // onCompletion: OnCompleteAction.DeleteApplication,
    pushint 5 // 5
    itxn_field OnCompletion
    // smart_contracts/listing_factory/contract.algo.ts:113-118
    // listingContract.call.purchase({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [purchasePayment, new Address(Txn.sender)],
    //   fee: 0,
    // })
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:117
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:113-118
    // listingContract.call.purchase({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [purchasePayment, new Address(Txn.sender)],
    //   fee: 0,
    // })
    itxn_submit
    // smart_contracts/listing_factory/contract.algo.ts:120-126
    // itxn
    //   .payment({
    //     amount: Uint64(this.childContractMBR.value),
    //     receiver: seller,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_factory/constants.ts:10
    // export const CHILD_CONTRACT_MBR = 'child_contract_mbr'
    intc_0 // 0
    bytec_0 // "child_contract_mbr"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/listing_factory/contract.algo.ts:120-125
    // itxn
    //   .payment({
    //     amount: Uint64(this.childContractMBR.value),
    //     receiver: seller,
    //     fee: 0,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:124
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:120-126
    // itxn
    //   .payment({
    //     amount: Uint64(this.childContractMBR.value),
    //     receiver: seller,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/listing_factory/contract.algo.ts::ListingFactory.delist(listingAppId: uint64) -> void:
delist:
    // smart_contracts/listing_factory/contract.algo.ts:129
    // delist(listingAppId: uint64): void {
    proto 1 0
    // smart_contracts/listing_factory/contract.algo.ts:131
    // assert(listingApp.creator === Global.currentApplicationAddress, NOT_A_LISTING)
    frame_dig -1
    app_params_get AppCreator
    assert // application exists
    global CurrentApplicationAddress
    ==
    assert // Not a listing contract
    // smart_contracts/listing_factory/contract.algo.ts:135-140
    // listingContract.call.delist({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [new Address(Txn.sender)],
    //   fee: 0,
    // })
    itxn_begin
    // smart_contracts/listing_factory/contract.algo.ts:138
    // args: [new Address(Txn.sender)],
    txn Sender
    // smart_contracts/listing_factory/contract.algo.ts:135-140
    // listingContract.call.delist({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [new Address(Txn.sender)],
    //   fee: 0,
    // })
    pushbytes 0x68e86343 // method "delist(address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    // smart_contracts/listing_factory/contract.algo.ts:136
    // onCompletion: OnCompleteAction.DeleteApplication,
    pushint 5 // 5
    itxn_field OnCompletion
    // smart_contracts/listing_factory/contract.algo.ts:135-140
    // listingContract.call.delist({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [new Address(Txn.sender)],
    //   fee: 0,
    // })
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:139
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:135-140
    // listingContract.call.delist({
    //   onCompletion: OnCompleteAction.DeleteApplication,
    //   appId: listingApp.id,
    //   args: [new Address(Txn.sender)],
    //   fee: 0,
    // })
    itxn_submit
    // smart_contracts/listing_factory/contract.algo.ts:142-148
    // itxn
    //   .payment({
    //     amount: Uint64(this.childContractMBR.value),
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_factory/constants.ts:10
    // export const CHILD_CONTRACT_MBR = 'child_contract_mbr'
    intc_0 // 0
    bytec_0 // "child_contract_mbr"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/listing_factory/contract.algo.ts:145
    // receiver: Txn.sender,
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/listing_factory/contract.algo.ts:142-147
    // itxn
    //   .payment({
    //     amount: Uint64(this.childContractMBR.value),
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:146
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:142-148
    // itxn
    //   .payment({
    //     amount: Uint64(this.childContractMBR.value),
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/listing_factory/contract.algo.ts::ListingFactory.optinToListingAsset(payment: uint64, asset: uint64) -> void:
optinToListingAsset:
    // smart_contracts/listing_factory/contract.algo.ts:156
    // public optinToListingAsset(payment: gtxn.PaymentTxn, asset: uint64): void {
    proto 2 0
    // smart_contracts/listing_factory/contract.algo.ts:157
    // assert(payment.receiver === Global.currentApplicationAddress)
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/listing_factory/contract.algo.ts:158
    // assert(payment.amount === Global.assetOptInMinBalance)
    frame_dig -2
    gtxns Amount
    global AssetOptInMinBalance
    ==
    assert
    // smart_contracts/listing_factory/contract.algo.ts:160-167
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/listing_factory/contract.algo.ts:162
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/listing_factory/contract.algo.ts:163
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // smart_contracts/listing_factory/contract.algo.ts:160-166
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: asset,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/listing_factory/contract.algo.ts:165
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/listing_factory/contract.algo.ts:160-167
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub
