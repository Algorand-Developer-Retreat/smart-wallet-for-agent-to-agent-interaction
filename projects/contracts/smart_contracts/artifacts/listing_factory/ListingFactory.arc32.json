{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "updateApplication()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "list(pay,axfer)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "recordNegotiatedPrice(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delist(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optinToListingAsset(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "childContractMBR": {
                    "type": "uint64",
                    "key": "child_contract_mbr"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ListingFactory",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "list",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    },
                    {
                        "type": "axfer",
                        "name": "assetXfer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "recordNegotiatedPrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "listingAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "purchase",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    },
                    {
                        "type": "uint64",
                        "name": "listingAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delist",
                "args": [
                    {
                        "type": "uint64",
                        "name": "listingAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "optinToListingAsset",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction"
                    },
                    {
                        "type": "uint64",
                        "name": "asset",
                        "desc": "The asset to be opted into"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "optin tells the contract to opt into an asa"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}