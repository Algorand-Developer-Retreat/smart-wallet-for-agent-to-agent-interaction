{
    "name": "ListingFactory",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "list",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "axfer",
                    "name": "assetXfer"
                },
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "application",
                    "name": "listingApp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delist",
            "args": [
                {
                    "type": "application",
                    "name": "listingApp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "childContractMBR": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2hpbGRfY29udHJhY3RfbWJy"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        231,
                        239
                    ],
                    "errorMessage": "Asset transfer failed"
                },
                {
                    "pc": [
                        935
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        885,
                        1010
                    ],
                    "errorMessage": "Not a listing contract"
                },
                {
                    "pc": [
                        85,
                        103,
                        131,
                        185
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        176
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        217
                    ],
                    "errorMessage": "Payment amount must be equal to MBR amount"
                },
                {
                    "pc": [
                        899
                    ],
                    "errorMessage": "Payment amount must be greater than 0"
                },
                {
                    "pc": [
                        225,
                        893
                    ],
                    "errorMessage": "Payment receiver must be current application address"
                },
                {
                    "pc": [
                        810,
                        855,
                        881,
                        940,
                        1006
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        189
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        88,
                        106,
                        134,
                        179
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        208,
                        986,
                        1043
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        116,
                        145
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEGBCYCEmNoaWxkX2NvbnRyYWN0X21icgQVH3x1MRtBACqCBQS4RHs2BEb3ZTME433ntgTz2xCJBHTwUzk2GgCOBQBmAFwAMAAUAAIiQzEZFEQxGEQ2GgEXwDKIA4UjQzEZFEQxGEQxFiMJSTgQIxJENhoBF8AyiALsI0MxGRREMRhEMRaBAglJOBAjEkQxFiMJSTgQJRJENhoBVwIAiAAlFilMULAjQzEZJRJEMRhEI0MxGRREMRgURIgAAiNDKIHsrw5niYoDASIoZUQyEAiL/TgIEkSL/TgHMgoSRIv+OBJJRIv+OBQyChJEsTEAIhaL/jgRSbIwgATBcLn+shqAAQCyGk8CshpMshojsjWBA7I0gAQKgQFDskKA9gMKIAQAAQQFJgMGc2VsbGVyBWFzc2V0EG5lZ290aWF0ZWRfcHJpY2UxGEAAAyoiZzEbQQAxggYEwXC5/gSmKHUNBMYL0YQEUskGrgRo6GNDBN+hSNY2GgCOBgBrAFsAQQAnABcAAiJDMRkURDEYRIgBgIAEFR98dUxQsCNDMRklEkQxGEQ2GgGIASsjQzEZJRJEMRhEMRYjCUk4ECMSRDYaAYgAmiNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiABTI0MxGRREMRhENhoBF4gANSNDMRkURDEYFEQ2GgEXwDA2GgI2GgMXiAACI0OKAwAyDUQpi/1nKIv+Z4AFcHJpY2WL/2eJigEAMQAyCRJEKov/Z4mKAgAxADIJEkSL/jgHMgoSRIv+OAgyEBJEsTIKi/+yESKyErIUJLIQIrIBs4mKAgAxADIJEkQiKmVERIv+OAAyCRJEi/44CCIqZUQSRIv+OAcyChJEIillRIv/THAARQFBACGxMgoiKWVEcABEIillRLIRshKL/7IUi/+yFSSyECKyAbOxIihlRCIpZURxBESABSBTb2xkULIFsgkjshAisgGziYoBADEAMgkSRCIoZUSL/xJEIihlRCIoZUQiKWVEIihlRLFMshFMshVMshQkshAisgG2sgkjshAisgGziSIoZUSJskAishkkshAisgGztwA9SXIIRDIQsbIIsgcjshAisgG2SwEWgATGC9GEshqyGiKyGUmyGCSyECKyAbOxSXIIRE8CshFPArISshQlshAisgGziYoCAIv/cgdEMgoSRIv+OAcyChJEi/44CElEsYAE36FI1rIaIrIZi/+yGCSyECKyAbO0PklXBABMVwAEKRJEi/9yCESxTwKyCLIHI7IQIrIBtjEAgARSyQaushqyGov/shiBBbIZJLIQIrIBs7EiKGVEsgiyByOyECKyAbOJigEAi/9yB0QyChJEsTEAgARo6GNDshqyGov/shiBBbIZJLIQIrIBs7EiKGVEMQCyB7III7IQIrIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}