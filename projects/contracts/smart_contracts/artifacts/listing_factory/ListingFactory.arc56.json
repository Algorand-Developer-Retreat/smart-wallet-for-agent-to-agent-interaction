{
    "name": "ListingFactory",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "list",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "axfer",
                    "name": "assetXfer"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "uint64",
                    "name": "listingAppId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delist",
            "args": [
                {
                    "type": "uint64",
                    "name": "listingAppId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optinToListingAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction"
                },
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to be opted into"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "optin tells the contract to opt into an asa",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "childContractMBR": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2hpbGRfY29udHJhY3RfbWJy"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        256,
                        264
                    ],
                    "errorMessage": "Asset transfer failed"
                },
                {
                    "pc": [
                        986,
                        1087
                    ],
                    "errorMessage": "Not a listing contract"
                },
                {
                    "pc": [
                        88,
                        114,
                        130,
                        156,
                        208
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        199
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        242
                    ],
                    "errorMessage": "Payment amount must be equal to MBR amount"
                },
                {
                    "pc": [
                        1000
                    ],
                    "errorMessage": "Payment amount must be greater than 0"
                },
                {
                    "pc": [
                        250,
                        994
                    ],
                    "errorMessage": "Payment receiver must be current application address"
                },
                {
                    "pc": [
                        913,
                        956,
                        982,
                        1018,
                        1083
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        212
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        91,
                        117,
                        133,
                        159,
                        202
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        231,
                        1063,
                        1121
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        179
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        101,
                        143,
                        169
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAECBCYCEmNoaWxkX2NvbnRyYWN0X21icgTGC9GEMRtBAC2CBQS4RHs2BEb3ZTMEb1BiYgTuAuznBMl9uy4pNhoAjgYAegBwAEYALAAcAAIiQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gEAyNDMRkURDEYRDYaAReIA7cjQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gDOCNDMRkURDEYRDEWJAlJOBAjEkQxFiMJSTgQJRJEiAAqFoAEFR98dUxQsCNDMRklEkQxGEQjQzEZFEQxGBREiAACI0MogZjRDGeJigIBIihlRDIQJAsIi/44CBJEi/44BzIKEkSL/zgSSUSL/zgUMgoSRLExAIv/OBFJsjCABHzn2LiyGoABALIaTLIaI7I1JLI0gAQKgQFDskKAygQKIAQAAQQFJgMFYXNzZXQGc2VsbGVyEG5lZ290aWF0ZWRfcHJpY2UxGEAAAyoiZzEbQQAxggYEfOfYuASmKHUNBMYL0YQEUskGrgRo6GNDBACMaQQ2GgCOBgCnAJcAfQBjAFMAAiJDMRkURDEYRIgBuU8FFk8FFksFFRZXBgJPBlBLBRUWVwYCTwZQTwUWTwRPBFCAAgA8UEsDFYE8CBZXBgJQTFBPA1BPAlBMUIAEFR98dUxQsCNDMRklEkQxGEQ2GgGIASgjQzEZJRJEMRhEMRYjCUk4ECMSRDYaAYgAkSNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiABHI0MxGRREMRhENhoBF4gAJyNDMRkURDEYFEQ2GgEXwDA2GgKIAAIjQ4oCADINRCiL/mcpi/9niYoBADEAIillRBJEKov/Z4mKAgAxADIJEkSL/jgHMgoSRIv+OAgyEIECCxJEsTIKi/+yESKyErIUJLIQIrIBs4mKAgAxADIJEkQiKmVERIv+OAAyCRJEi/44CCIqZUQSRIv+OAcyChJEIihlRIv/THAARQFBACGxMgoiKGVEcABEIihlRLIRshKL/7IUi/+yFSSyECKyAbOxIillRCIpZUQiKGVEcQREgAUgU29sZFCyBbIJsgcjshAisgGziYoBADEAMgkSRCIpZUSL/xJEIillRCIpZUQiKGVEIillRLFMshFMshVMshQkshAisgG2sgkjshAisgGziTIIIihlRCIoZURxBEQiKGVEcQNEIihlRHEBRCIpZUSJskAishmBBrIQIrIBs7cAPUlyCEQyECQLsbIIsgcjshAisgG2SwEWKbIashoishlJshiBBrIQIrIBs7FJcghETwKyEU8CshKyFCWyECKyAbOJigIAi/9yB0QyChJEi/44BzIKEkSL/jgISUSL/4AGc2VsbGVyZUhMi/9yCESxsgeyCCOyECKyAbYxAIAEUskGrrIashqL/7IYgQWyGYEGshAisgGzsSIoZUSyCLIHI7IQIrIBs4mKAQCL/3IHRDIKEkSxMQCABGjoY0OyGrIai/+yGIEFshmBBrIQIrIBs7EiKGVEMQCyB7III7IQIrIBs4mKAgCL/jgHMgoSRIv+OAgyEBJEsTIKi/+yESKyErIUJbIQIrIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}