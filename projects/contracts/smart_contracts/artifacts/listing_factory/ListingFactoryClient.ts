/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ListingFactory","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"list","args":[{"type":"pay","name":"payment"},{"type":"axfer","name":"assetXfer"},{"type":"string","name":"name"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"purchase","args":[{"type":"pay","name":"payment"},{"type":"application","name":"listingApp"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delist","args":[{"type":"application","name":"listingApp"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"childContractMBR":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2hpbGRfY29udHJhY3RfbWJy"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[231,239],"errorMessage":"Asset transfer failed"},{"pc":[935],"errorMessage":"Bytes has valid prefix"},{"pc":[885,1010],"errorMessage":"Not a listing contract"},{"pc":[85,103,131,185],"errorMessage":"OnCompletion is not NoOp"},{"pc":[176],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[217],"errorMessage":"Payment amount must be equal to MBR amount"},{"pc":[899],"errorMessage":"Payment amount must be greater than 0"},{"pc":[225,893],"errorMessage":"Payment receiver must be current application address"},{"pc":[810,855,881,940,1006],"errorMessage":"application exists"},{"pc":[189],"errorMessage":"can only call when creating"},{"pc":[88,106,134,179],"errorMessage":"can only call when not creating"},{"pc":[208,986,1043],"errorMessage":"check GlobalState exists"},{"pc":[155],"errorMessage":"transaction type is axfer"},{"pc":[116,145],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEGBCYCEmNoaWxkX2NvbnRyYWN0X21icgQVH3x1MRtBACqCBQS4RHs2BEb3ZTME433ntgTz2xCJBHTwUzk2GgCOBQBmAFwAMAAUAAIiQzEZFEQxGEQ2GgEXwDKIA4UjQzEZFEQxGEQxFiMJSTgQIxJENhoBF8AyiALsI0MxGRREMRhEMRaBAglJOBAjEkQxFiMJSTgQJRJENhoBVwIAiAAlFilMULAjQzEZJRJEMRhEI0MxGRREMRgURIgAAiNDKIHsrw5niYoDASIoZUQyEAiL/TgIEkSL/TgHMgoSRIv+OBJJRIv+OBQyChJEsTEAIhaL/jgRSbIwgATBcLn+shqAAQCyGk8CshpMshojsjWBA7I0gAQKgQFDskKA9gMKIAQAAQQFJgMGc2VsbGVyBWFzc2V0EG5lZ290aWF0ZWRfcHJpY2UxGEAAAyoiZzEbQQAxggYEwXC5/gSmKHUNBMYL0YQEUskGrgRo6GNDBN+hSNY2GgCOBgBrAFsAQQAnABcAAiJDMRkURDEYRIgBgIAEFR98dUxQsCNDMRklEkQxGEQ2GgGIASsjQzEZJRJEMRhEMRYjCUk4ECMSRDYaAYgAmiNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiABTI0MxGRREMRhENhoBF4gANSNDMRkURDEYFEQ2GgEXwDA2GgI2GgMXiAACI0OKAwAyDUQpi/1nKIv+Z4AFcHJpY2WL/2eJigEAMQAyCRJEKov/Z4mKAgAxADIJEkSL/jgHMgoSRIv+OAgyEBJEsTIKi/+yESKyErIUJLIQIrIBs4mKAgAxADIJEkQiKmVERIv+OAAyCRJEi/44CCIqZUQSRIv+OAcyChJEIillRIv/THAARQFBACGxMgoiKWVEcABEIillRLIRshKL/7IUi/+yFSSyECKyAbOxIihlRCIpZURxBESABSBTb2xkULIFsgkjshAisgGziYoBADEAMgkSRCIoZUSL/xJEIihlRCIoZUQiKWVEIihlRLFMshFMshVMshQkshAisgG2sgkjshAisgGziSIoZUSJskAishkkshAisgGztwA9SXIIRDIQsbIIsgcjshAisgG2SwEWgATGC9GEshqyGiKyGUmyGCSyECKyAbOxSXIIRE8CshFPArISshQlshAisgGziYoCAIv/cgdEMgoSRIv+OAcyChJEi/44CElEsYAE36FI1rIaIrIZi/+yGCSyECKyAbO0PklXBABMVwAEKRJEi/9yCESxTwKyCLIHI7IQIrIBtjEAgARSyQaushqyGov/shiBBbIZJLIQIrIBs7EiKGVEsgiyByOyECKyAbOJigEAi/9yB0QyChJEsTEAgARo6GNDshqyGov/shiBBbIZJLIQIrIBs7EiKGVEMQCyB7III7IQIrIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ListingFactory contract
 */
export type ListingFactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updateApplication()void': Record<string, never>
    'list(pay,axfer,string)uint64': {
      payment: AppMethodCallTransactionArgument
      assetXfer: AppMethodCallTransactionArgument
      name: string
    }
    'purchase(pay,application)void': {
      payment: AppMethodCallTransactionArgument
      listingApp: bigint
    }
    'delist(application)void': {
      listingApp: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updateApplication()void': []
    'list(pay,axfer,string)uint64': [payment: AppMethodCallTransactionArgument, assetXfer: AppMethodCallTransactionArgument, name: string]
    'purchase(pay,application)void': [payment: AppMethodCallTransactionArgument, listingApp: bigint]
    'delist(application)void': [listingApp: bigint]
  }
}

/**
 * The return type for each method
 */
export type ListingFactoryReturns = {
  'createApplication()void': void
  'updateApplication()void': void
  'list(pay,axfer,string)uint64': bigint
  'purchase(pay,application)void': void
  'delist(application)void': void
}

/**
 * Defines the types of available calls and state of the ListingFactory smart contract.
 */
export type ListingFactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: ListingFactoryArgs['obj']['createApplication()void']
      argsTuple: ListingFactoryArgs['tuple']['createApplication()void']
      returns: ListingFactoryReturns['createApplication()void']
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: ListingFactoryArgs['obj']['updateApplication()void']
      argsTuple: ListingFactoryArgs['tuple']['updateApplication()void']
      returns: ListingFactoryReturns['updateApplication()void']
    }>
    & Record<'list(pay,axfer,string)uint64' | 'list', {
      argsObj: ListingFactoryArgs['obj']['list(pay,axfer,string)uint64']
      argsTuple: ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']
      returns: ListingFactoryReturns['list(pay,axfer,string)uint64']
    }>
    & Record<'purchase(pay,application)void' | 'purchase', {
      argsObj: ListingFactoryArgs['obj']['purchase(pay,application)void']
      argsTuple: ListingFactoryArgs['tuple']['purchase(pay,application)void']
      returns: ListingFactoryReturns['purchase(pay,application)void']
    }>
    & Record<'delist(application)void' | 'delist', {
      argsObj: ListingFactoryArgs['obj']['delist(application)void']
      argsTuple: ListingFactoryArgs['tuple']['delist(application)void']
      returns: ListingFactoryReturns['delist(application)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        childContractMbr: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ListingFactorySignatures = keyof ListingFactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ListingFactoryNonVoidMethodSignatures = keyof ListingFactoryTypes['methods'] extends infer T ? T extends keyof ListingFactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ListingFactory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ListingFactorySignatures> = ListingFactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ListingFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ListingFactorySignatures> = ListingFactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ListingFactoryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ListingFactoryCreateCallParams =
  | Expand<CallParams<ListingFactoryArgs['obj']['createApplication()void'] | ListingFactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ListingFactoryArgs['obj']['createApplication()void'] | ListingFactoryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type ListingFactoryUpdateCallParams =
  | Expand<CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type ListingFactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ListingFactoryCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: ListingFactoryUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ListingFactory smart contract
 */
export abstract class ListingFactoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ListingFactoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ListingFactoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ListingFactory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ListingFactoryArgs['obj']['createApplication()void'] | ListingFactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends ListingFactoryUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return ListingFactoryParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the ListingFactory smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the list(pay,axfer,string)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static list(params: CallParams<ListingFactoryArgs['obj']['list(pay,axfer,string)uint64'] | ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'list(pay,axfer,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.assetXfer, params.args.name],
    }
  }
  /**
   * Constructs a no op call for the purchase(pay,application)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchase(params: CallParams<ListingFactoryArgs['obj']['purchase(pay,application)void'] | ListingFactoryArgs['tuple']['purchase(pay,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase(pay,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.listingApp],
    }
  }
  /**
   * Constructs a no op call for the delist(application)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delist(params: CallParams<ListingFactoryArgs['obj']['delist(application)void'] | ListingFactoryArgs['tuple']['delist(application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delist(application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.listingApp],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ListingFactory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ListingFactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ListingFactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ListingFactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ListingFactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ListingFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ListingFactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ListingFactoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ListingFactoryCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? ListingFactoryParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (ListingFactoryUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ListingFactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ListingFactory smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ListingFactoryArgs['obj']['createApplication()void'] | ListingFactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(ListingFactoryParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the ListingFactory smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(ListingFactoryParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ListingFactory smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ListingFactoryArgs['obj']['createApplication()void'] | ListingFactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(ListingFactoryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ListingFactory smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ListingFactoryArgs['obj']['createApplication()void'] | ListingFactoryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(ListingFactoryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ListingFactoryReturns['createApplication()void']) }, appClient: new ListingFactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ListingFactory smart contract
 */
export class ListingFactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ListingFactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ListingFactory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ListingFactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ListingFactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ListingFactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ListingFactoryClient> {
    return new ListingFactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ListingFactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ListingFactoryClient> {
    return new ListingFactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the ListingFactory smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(ListingFactoryParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ListingFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `list(pay,axfer,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    list: (params: CallParams<ListingFactoryArgs['obj']['list(pay,axfer,string)uint64'] | ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ListingFactoryParamsFactory.list(params))
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `purchase(pay,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchase: (params: CallParams<ListingFactoryArgs['obj']['purchase(pay,application)void'] | ListingFactoryArgs['tuple']['purchase(pay,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ListingFactoryParamsFactory.purchase(params))
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `delist(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delist: (params: CallParams<ListingFactoryArgs['obj']['delist(application)void'] | ListingFactoryArgs['tuple']['delist(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ListingFactoryParamsFactory.delist(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the ListingFactory smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(ListingFactoryParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ListingFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `list(pay,axfer,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    list: (params: CallParams<ListingFactoryArgs['obj']['list(pay,axfer,string)uint64'] | ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ListingFactoryParamsFactory.list(params))
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `purchase(pay,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchase: (params: CallParams<ListingFactoryArgs['obj']['purchase(pay,application)void'] | ListingFactoryArgs['tuple']['purchase(pay,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ListingFactoryParamsFactory.purchase(params))
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `delist(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delist: (params: CallParams<ListingFactoryArgs['obj']['delist(application)void'] | ListingFactoryArgs['tuple']['delist(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ListingFactoryParamsFactory.delist(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the ListingFactory smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(ListingFactoryParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | ListingFactoryReturns['updateApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ListingFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `list(pay,axfer,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    list: async (params: CallParams<ListingFactoryArgs['obj']['list(pay,axfer,string)uint64'] | ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ListingFactoryParamsFactory.list(params))
      return {...result, return: result.return as unknown as (undefined | ListingFactoryReturns['list(pay,axfer,string)uint64'])}
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `purchase(pay,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchase: async (params: CallParams<ListingFactoryArgs['obj']['purchase(pay,application)void'] | ListingFactoryArgs['tuple']['purchase(pay,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ListingFactoryParamsFactory.purchase(params))
      return {...result, return: result.return as unknown as (undefined | ListingFactoryReturns['purchase(pay,application)void'])}
    },

    /**
     * Makes a call to the ListingFactory smart contract using the `delist(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delist: async (params: CallParams<ListingFactoryArgs['obj']['delist(application)void'] | ListingFactoryArgs['tuple']['delist(application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ListingFactoryParamsFactory.delist(params))
      return {...result, return: result.return as unknown as (undefined | ListingFactoryReturns['delist(application)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ListingFactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ListingFactory app
   */
  state = {
    /**
     * Methods to access global state for the current ListingFactory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          childContractMbr: result.childContractMBR,
        }
      },
      /**
       * Get the current value of the childContractMBR key in global state
       */
      childContractMbr: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("childContractMBR")) as bigint | undefined },
    },
  }

  public newGroup(): ListingFactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a list(pay,axfer,string)uint64 method call against the ListingFactory contract
       */
      list(params: CallParams<ListingFactoryArgs['obj']['list(pay,axfer,string)uint64'] | ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.list(params)))
        resultMappers.push((v) => client.decodeReturnValue('list(pay,axfer,string)uint64', v))
        return this
      },
      /**
       * Add a purchase(pay,application)void method call against the ListingFactory contract
       */
      purchase(params: CallParams<ListingFactoryArgs['obj']['purchase(pay,application)void'] | ListingFactoryArgs['tuple']['purchase(pay,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchase(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delist(application)void method call against the ListingFactory contract
       */
      delist(params: CallParams<ListingFactoryArgs['obj']['delist(application)void'] | ListingFactoryArgs['tuple']['delist(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delist(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the ListingFactory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ListingFactoryComposer
  }
}
export type ListingFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the list(pay,axfer,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  list(params?: CallParams<ListingFactoryArgs['obj']['list(pay,axfer,string)uint64'] | ListingFactoryArgs['tuple']['list(pay,axfer,string)uint64']>): ListingFactoryComposer<[...TReturns, ListingFactoryReturns['list(pay,axfer,string)uint64'] | undefined]>

  /**
   * Calls the purchase(pay,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchase(params?: CallParams<ListingFactoryArgs['obj']['purchase(pay,application)void'] | ListingFactoryArgs['tuple']['purchase(pay,application)void']>): ListingFactoryComposer<[...TReturns, ListingFactoryReturns['purchase(pay,application)void'] | undefined]>

  /**
   * Calls the delist(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delist(params?: CallParams<ListingFactoryArgs['obj']['delist(application)void'] | ListingFactoryArgs['tuple']['delist(application)void']>): ListingFactoryComposer<[...TReturns, ListingFactoryReturns['delist(application)void'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the ListingFactory smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<ListingFactoryArgs['obj']['updateApplication()void'] | ListingFactoryArgs['tuple']['updateApplication()void']>): ListingFactoryComposer<[...TReturns, ListingFactoryReturns['updateApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ListingFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ListingFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ListingFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ListingFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ListingFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ListingFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ListingFactoryComposerResults<TReturns>>
}
export type ListingFactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

