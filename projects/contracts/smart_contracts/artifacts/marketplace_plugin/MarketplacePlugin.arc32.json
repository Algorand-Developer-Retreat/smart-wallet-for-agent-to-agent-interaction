{
    "hints": {
        "list(uint64,bool,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "recordNegotiatedPrice(uint64,uint64,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase(uint64,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delist(uint64,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "priceNegotiated": {
                    "type": "uint64",
                    "key": "priceNegotiated",
                    "descr": "whether the price has been negotiated"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MarketplacePlugin",
        "methods": [
            {
                "name": "list",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sender"
                    },
                    {
                        "type": "bool",
                        "name": "rekeyBack"
                    },
                    {
                        "type": "uint64",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "assetAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "recordNegotiatedPrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sender"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "factoryID"
                    },
                    {
                        "type": "uint64",
                        "name": "listingAppID"
                    },
                    {
                        "type": "bool",
                        "name": "rekeyBack"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "purchase",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sender"
                    },
                    {
                        "type": "bool",
                        "name": "rekeyBack"
                    },
                    {
                        "type": "uint64",
                        "name": "listingAppID"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delist",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sender"
                    },
                    {
                        "type": "bool",
                        "name": "rekeyBack"
                    },
                    {
                        "type": "uint64",
                        "name": "listingAppID"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}