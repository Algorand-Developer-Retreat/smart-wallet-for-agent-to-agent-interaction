{
    "name": "MarketplacePlugin",
    "structs": {},
    "methods": [
        {
            "name": "list",
            "args": [
                {
                    "type": "uint64",
                    "name": "sender"
                },
                {
                    "type": "bool",
                    "name": "rekeyBack"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "assetAmount"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recordNegotiatedPrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "sender"
                },
                {
                    "type": "bool",
                    "name": "rekeyBack"
                },
                {
                    "type": "uint64",
                    "name": "listingAppID"
                },
                {
                    "type": "uint64",
                    "name": "price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase",
            "args": [
                {
                    "type": "uint64",
                    "name": "sender"
                },
                {
                    "type": "bool",
                    "name": "rekeyBack"
                },
                {
                    "type": "uint64",
                    "name": "listingAppID"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delist",
            "args": [
                {
                    "type": "uint64",
                    "name": "sender"
                },
                {
                    "type": "bool",
                    "name": "rekeyBack"
                },
                {
                    "type": "uint64",
                    "name": "listingAppID"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        368
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        462,
                        566
                    ],
                    "errorMessage": "Creator is not the marketplace"
                },
                {
                    "pc": [
                        189
                    ],
                    "errorMessage": "Not enough asset"
                },
                {
                    "pc": [
                        45,
                        70,
                        95,
                        124
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        185
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        192,
                        206,
                        266,
                        270,
                        323,
                        389,
                        394,
                        455,
                        460,
                        488,
                        560,
                        564
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        163
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        48,
                        73,
                        98,
                        127
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        396
                    ],
                    "errorMessage": "listing is not from factory"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEABiYCEmNvbnRyb2xsZWRfYWRkcmVzcwQVH3x1MRtBAJaCBATYtbS4BBPfItQEI9zubARZRm7yNhoAjgQAUQA0ABsAAiJDMRkURDEYRDYaARc2GgIiUzYaAxeIAeIjQzEZFEQxGEQ2GgEXNhoCIlM2GgMXiAFfI0MxGRREMRhENhoBFzYaAiJTNhoDFzYaBBeIAQMjQzEZFEQxGEQ2GgEXNhoCIlM2GgMXNhoEF4gAEhYpTFCwI0MxGUD/iDEYFEQjQ4oEAYAAi/woZUhJJElPAov+cABEi/8PRHIIRIv+cABFAUAAMYsCcghEMhCxsgiyB4sBsgAjshAisgG2JIv+FoAExgvRhLIashoishmyGCWyECKyAbMyEIECC4GY0QwIiwJJcghETHIIRLFPArIITLIHiwFJsgAjshAisgG2i/6yEYv/shKyALIUgQSyECKyAbYkjACL/UEANov8cghEgARvUGJishoishkisjiyIIsAshiLAbIAJbIQIrIBs7cCPklXBABMVwAEKRJEF4wAiTIDQv/KigQAi/woZUgkcghEi/5yB0QSRLGL/UEAIYsAi/8WgASmKHUNshqyGrIgi/6yGIsAsgAlshAisgGziTIDQv/cigMAi/0oZUhJJIv/cgdESwFyCEQSRIv/gBBuZWdvdGlhdGVkX3ByaWNlZUhMcghEsbIHsgiyACOyECKyAbYki/5BACGLAIv/FoAE7gLs57IashqyIIsBshiLALIAJbIQIrIBs4kyA0L/3IoDAIv9KGVIJIv/cgdETHIIRBJEsSSL/kEAJIsAi/8WgATJfbsushqyGiKyGbIgiwGyGIsAsgAlshAisgGziTIDQv/Z",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {
        "FACTORY_APP_ID": {
            "type": "AVMUint64"
        }
    }
}