/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"MarketplacePlugin","structs":{},"methods":[{"name":"list","args":[{"type":"uint64","name":"sender"},{"type":"bool","name":"rekeyBack"},{"type":"uint64","name":"asset"},{"type":"uint64","name":"assetAmount"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"recordNegotiatedPrice","args":[{"type":"uint64","name":"sender"},{"type":"bool","name":"rekeyBack"},{"type":"uint64","name":"listingAppID"},{"type":"uint64","name":"price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"purchase","args":[{"type":"uint64","name":"sender"},{"type":"bool","name":"rekeyBack"},{"type":"uint64","name":"listingAppID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delist","args":[{"type":"uint64","name":"sender"},{"type":"bool","name":"rekeyBack"},{"type":"uint64","name":"listingAppID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[368],"errorMessage":"Bytes has valid prefix"},{"pc":[462,566],"errorMessage":"Creator is not the marketplace"},{"pc":[189],"errorMessage":"Not enough asset"},{"pc":[45,70,95,124],"errorMessage":"OnCompletion is not NoOp"},{"pc":[185],"errorMessage":"account opted into asset"},{"pc":[192,206,266,270,323,389,394,455,460,488,560,564],"errorMessage":"application exists"},{"pc":[163],"errorMessage":"can only call when creating"},{"pc":[48,73,98,127],"errorMessage":"can only call when not creating"},{"pc":[396],"errorMessage":"listing is not from factory"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEABiYCEmNvbnRyb2xsZWRfYWRkcmVzcwQVH3x1MRtBAJaCBATYtbS4BBPfItQEI9zubARZRm7yNhoAjgQAUQA0ABsAAiJDMRkURDEYRDYaARc2GgIiUzYaAxeIAeIjQzEZFEQxGEQ2GgEXNhoCIlM2GgMXiAFfI0MxGRREMRhENhoBFzYaAiJTNhoDFzYaBBeIAQMjQzEZFEQxGEQ2GgEXNhoCIlM2GgMXNhoEF4gAEhYpTFCwI0MxGUD/iDEYFEQjQ4oEAYAAi/woZUhJJElPAov+cABEi/8PRHIIRIv+cABFAUAAMYsCcghEMhCxsgiyB4sBsgAjshAisgG2JIv+FoAExgvRhLIashoishmyGCWyECKyAbMyEIECC4GY0QwIiwJJcghETHIIRLFPArIITLIHiwFJsgAjshAisgG2i/6yEYv/shKyALIUgQSyECKyAbYkjACL/UEANov8cghEgARvUGJishoishkisjiyIIsAshiLAbIAJbIQIrIBs7cCPklXBABMVwAEKRJEF4wAiTIDQv/KigQAi/woZUgkcghEi/5yB0QSRLGL/UEAIYsAi/8WgASmKHUNshqyGrIgi/6yGIsAsgAlshAisgGziTIDQv/cigMAi/0oZUhJJIv/cgdESwFyCEQSRIv/gBBuZWdvdGlhdGVkX3ByaWNlZUhMcghEsbIHsgiyACOyECKyAbYki/5BACGLAIv/FoAE7gLs57IashqyIIsBshiLALIAJbIQIrIBs4kyA0L/3IoDAIv9KGVIJIv/cgdETHIIRBJEsSSL/kEAJIsAi/8WgATJfbsushqyGiKyGbIgiwGyGIsAsgAlshAisgGziTIDQv/Z","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{"FACTORY_APP_ID":{"type":"AVMUint64"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  FACTORY_APP_ID: bigint,
}

/**
 * The argument types for the MarketplacePlugin contract
 */
export type MarketplacePluginArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'list(uint64,bool,uint64,uint64)uint64': {
      sender: bigint | number
      rekeyBack: boolean
      asset: bigint | number
      assetAmount: bigint | number
    }
    'recordNegotiatedPrice(uint64,bool,uint64,uint64)void': {
      sender: bigint | number
      rekeyBack: boolean
      listingAppId: bigint | number
      price: bigint | number
    }
    'purchase(uint64,bool,uint64)void': {
      sender: bigint | number
      rekeyBack: boolean
      listingAppId: bigint | number
    }
    'delist(uint64,bool,uint64)void': {
      sender: bigint | number
      rekeyBack: boolean
      listingAppId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'list(uint64,bool,uint64,uint64)uint64': [sender: bigint | number, rekeyBack: boolean, asset: bigint | number, assetAmount: bigint | number]
    'recordNegotiatedPrice(uint64,bool,uint64,uint64)void': [sender: bigint | number, rekeyBack: boolean, listingAppId: bigint | number, price: bigint | number]
    'purchase(uint64,bool,uint64)void': [sender: bigint | number, rekeyBack: boolean, listingAppId: bigint | number]
    'delist(uint64,bool,uint64)void': [sender: bigint | number, rekeyBack: boolean, listingAppId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type MarketplacePluginReturns = {
  'list(uint64,bool,uint64,uint64)uint64': bigint
  'recordNegotiatedPrice(uint64,bool,uint64,uint64)void': void
  'purchase(uint64,bool,uint64)void': void
  'delist(uint64,bool,uint64)void': void
}

/**
 * Defines the types of available calls and state of the MarketplacePlugin smart contract.
 */
export type MarketplacePluginTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'list(uint64,bool,uint64,uint64)uint64' | 'list', {
      argsObj: MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64']
      argsTuple: MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']
      returns: MarketplacePluginReturns['list(uint64,bool,uint64,uint64)uint64']
    }>
    & Record<'recordNegotiatedPrice(uint64,bool,uint64,uint64)void' | 'recordNegotiatedPrice', {
      argsObj: MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']
      argsTuple: MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']
      returns: MarketplacePluginReturns['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']
    }>
    & Record<'purchase(uint64,bool,uint64)void' | 'purchase', {
      argsObj: MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void']
      argsTuple: MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']
      returns: MarketplacePluginReturns['purchase(uint64,bool,uint64)void']
    }>
    & Record<'delist(uint64,bool,uint64)void' | 'delist', {
      argsObj: MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void']
      argsTuple: MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']
      returns: MarketplacePluginReturns['delist(uint64,bool,uint64)void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type MarketplacePluginSignatures = keyof MarketplacePluginTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MarketplacePluginNonVoidMethodSignatures = keyof MarketplacePluginTypes['methods'] extends infer T ? T extends keyof MarketplacePluginTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MarketplacePlugin smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MarketplacePluginSignatures> = MarketplacePluginTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MarketplacePlugin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MarketplacePluginSignatures> = MarketplacePluginTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type MarketplacePluginCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MarketplacePluginDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MarketplacePluginCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MarketplacePlugin smart contract
 */
export abstract class MarketplacePluginParamsFactory {
  /**
   * Constructs a no op call for the list(uint64,bool,uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static list(params: CallParams<MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64'] | MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'list(uint64,bool,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.rekeyBack, params.args.asset, params.args.assetAmount],
    }
  }
  /**
   * Constructs a no op call for the recordNegotiatedPrice(uint64,bool,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordNegotiatedPrice(params: CallParams<MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recordNegotiatedPrice(uint64,bool,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.rekeyBack, params.args.listingAppId, params.args.price],
    }
  }
  /**
   * Constructs a no op call for the purchase(uint64,bool,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchase(params: CallParams<MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase(uint64,bool,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.rekeyBack, params.args.listingAppId],
    }
  }
  /**
   * Constructs a no op call for the delist(uint64,bool,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delist(params: CallParams<MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delist(uint64,bool,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.rekeyBack, params.args.listingAppId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MarketplacePlugin smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MarketplacePluginFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MarketplacePluginFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MarketplacePluginClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MarketplacePluginClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MarketplacePlugin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MarketplacePluginDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new MarketplacePluginClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MarketplacePlugin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MarketplacePlugin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MarketplacePlugin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new MarketplacePluginClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MarketplacePlugin smart contract
 */
export class MarketplacePluginClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MarketplacePluginClient`
   *
   * @param appClient An `AppClient` instance which has been created with the MarketplacePlugin app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MarketplacePluginClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MarketplacePluginNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MarketplacePluginClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MarketplacePluginClient> {
    return new MarketplacePluginClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MarketplacePluginClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MarketplacePluginClient> {
    return new MarketplacePluginClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the MarketplacePlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `list(uint64,bool,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    list: (params: CallParams<MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64'] | MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplacePluginParamsFactory.list(params))
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `recordNegotiatedPrice(uint64,bool,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordNegotiatedPrice: (params: CallParams<MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplacePluginParamsFactory.recordNegotiatedPrice(params))
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `purchase(uint64,bool,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchase: (params: CallParams<MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplacePluginParamsFactory.purchase(params))
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `delist(uint64,bool,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delist: (params: CallParams<MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MarketplacePluginParamsFactory.delist(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the MarketplacePlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `list(uint64,bool,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    list: (params: CallParams<MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64'] | MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplacePluginParamsFactory.list(params))
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `recordNegotiatedPrice(uint64,bool,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordNegotiatedPrice: (params: CallParams<MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplacePluginParamsFactory.recordNegotiatedPrice(params))
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `purchase(uint64,bool,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchase: (params: CallParams<MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplacePluginParamsFactory.purchase(params))
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `delist(uint64,bool,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delist: (params: CallParams<MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MarketplacePluginParamsFactory.delist(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the MarketplacePlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `list(uint64,bool,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    list: async (params: CallParams<MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64'] | MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplacePluginParamsFactory.list(params))
      return {...result, return: result.return as unknown as (undefined | MarketplacePluginReturns['list(uint64,bool,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `recordNegotiatedPrice(uint64,bool,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordNegotiatedPrice: async (params: CallParams<MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplacePluginParamsFactory.recordNegotiatedPrice(params))
      return {...result, return: result.return as unknown as (undefined | MarketplacePluginReturns['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `purchase(uint64,bool,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchase: async (params: CallParams<MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplacePluginParamsFactory.purchase(params))
      return {...result, return: result.return as unknown as (undefined | MarketplacePluginReturns['purchase(uint64,bool,uint64)void'])}
    },

    /**
     * Makes a call to the MarketplacePlugin smart contract using the `delist(uint64,bool,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delist: async (params: CallParams<MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MarketplacePluginParamsFactory.delist(params))
      return {...result, return: result.return as unknown as (undefined | MarketplacePluginReturns['delist(uint64,bool,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MarketplacePluginClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MarketplacePlugin app
   */
  state = {
  }

  public newGroup(): MarketplacePluginComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a list(uint64,bool,uint64,uint64)uint64 method call against the MarketplacePlugin contract
       */
      list(params: CallParams<MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64'] | MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.list(params)))
        resultMappers.push((v) => client.decodeReturnValue('list(uint64,bool,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a recordNegotiatedPrice(uint64,bool,uint64,uint64)void method call against the MarketplacePlugin contract
       */
      recordNegotiatedPrice(params: CallParams<MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordNegotiatedPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a purchase(uint64,bool,uint64)void method call against the MarketplacePlugin contract
       */
      purchase(params: CallParams<MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchase(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delist(uint64,bool,uint64)void method call against the MarketplacePlugin contract
       */
      delist(params: CallParams<MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the MarketplacePlugin contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MarketplacePluginComposer
  }
}
export type MarketplacePluginComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the list(uint64,bool,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  list(params?: CallParams<MarketplacePluginArgs['obj']['list(uint64,bool,uint64,uint64)uint64'] | MarketplacePluginArgs['tuple']['list(uint64,bool,uint64,uint64)uint64']>): MarketplacePluginComposer<[...TReturns, MarketplacePluginReturns['list(uint64,bool,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the recordNegotiatedPrice(uint64,bool,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordNegotiatedPrice(params?: CallParams<MarketplacePluginArgs['obj']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | MarketplacePluginArgs['tuple']['recordNegotiatedPrice(uint64,bool,uint64,uint64)void']>): MarketplacePluginComposer<[...TReturns, MarketplacePluginReturns['recordNegotiatedPrice(uint64,bool,uint64,uint64)void'] | undefined]>

  /**
   * Calls the purchase(uint64,bool,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchase(params?: CallParams<MarketplacePluginArgs['obj']['purchase(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['purchase(uint64,bool,uint64)void']>): MarketplacePluginComposer<[...TReturns, MarketplacePluginReturns['purchase(uint64,bool,uint64)void'] | undefined]>

  /**
   * Calls the delist(uint64,bool,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delist(params?: CallParams<MarketplacePluginArgs['obj']['delist(uint64,bool,uint64)void'] | MarketplacePluginArgs['tuple']['delist(uint64,bool,uint64)void']>): MarketplacePluginComposer<[...TReturns, MarketplacePluginReturns['delist(uint64,bool,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MarketplacePlugin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MarketplacePluginComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MarketplacePluginComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MarketplacePluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MarketplacePluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MarketplacePluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MarketplacePluginComposerResults<TReturns>>
}
export type MarketplacePluginComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

