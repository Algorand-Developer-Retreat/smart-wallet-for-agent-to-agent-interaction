/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Listing","structs":{},"methods":[{"name":"createApplication","args":[{"type":"asset","name":"asset","desc":"the asa ID that is to be sold"},{"type":"address","name":"seller","desc":"the wallet of the account selling the asset"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"create the listing application","events":[],"recommendations":{}},{"name":"recordNegotiatedPrice","args":[{"type":"uint64","name":"price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"optinToListingAsset","args":[{"type":"pay","name":"payment","desc":"The payment transaction"},{"type":"uint64","name":"asset","desc":"The asset to be opted into"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"optin tells the contract to opt into an asa","events":[],"recommendations":{}},{"name":"purchase","args":[{"type":"pay","name":"payment","desc":"- the payment for purchasing the asset"},{"type":"address","name":"buyer","desc":"- the buyer of the asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delist","args":[{"type":"address","name":"caller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"desc":"Deletes the app and returns the asset/mbr to the seller","events":[],"recommendations":{}},{"name":"getSeller","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"asset":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXQ=","desc":"the asset for sale"},"negotiatedPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmVnb3RpYXRlZF9wcmljZQ=="},"seller":{"keyType":"AVMString","valueType":"address","key":"c2VsbGVy","desc":"the address selling the asset"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[128,144],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[106,169,195,211],"errorMessage":"OnCompletion is not NoOp"},{"pc":[370],"errorMessage":"account opted into asset"},{"pc":[405],"errorMessage":"asset exists"},{"pc":[215],"errorMessage":"can only call when creating"},{"pc":[109,131,147,172,198],"errorMessage":"can only call when not creating"},{"pc":[319,336,350,367,374,398,402,438,446,450,454,458,489],"errorMessage":"check GlobalState exists"},{"pc":[235,253,315,434],"errorMessage":"must be called from the factory"},{"pc":[442],"errorMessage":"only the seller can delist"},{"pc":[267],"errorMessage":"optinToListingAsset must be called by creator"},{"pc":[286],"errorMessage":"payment amount must be asset optin min balance + min account mbr"},{"pc":[275],"errorMessage":"payment receiver must be this app"},{"pc":[320],"errorMessage":"price hasn't been negotiated yet"},{"pc":[157,182],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEEBSYDBnNlbGxlcgVhc3NldBBuZWdvdGlhdGVkX3ByaWNlMRhAAAMqImcxG0EAMYIGBHzn2LgEpih1DQTGC9GEBFLJBq4EaOhjQwTfoUjWNhoAjgYAawBbAEEAJwAXAAIiQzEZFEQxGESIAXWABBUffHVMULAjQzEZJRJEMRhENhoBiAEgI0MxGSUSRDEYRDEWIwlJOBAjEkQ2GgGIAI8jQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gARSNDMRkURDEYRDYaAReIACcjQzEZFEQxGBRENhoBF8AwNhoCiAACI0OKAgAyDUQpi/5nKIv/Z4mKAQAxADIJEkQqi/9niYoCADEAMgkSRIv+OAcyChJEi/44CDIQgQILEkSxMgqL/7IRIrISshQkshAisgGziYoCADEAMgkSRCIqZUREi/44ADIJEkSL/jgIIiplRBJEi/44BzIKEkQiKWVEi/9McABFAUEAIbEyCiIpZURwAEQiKWVEshGyEov/shSL/7IVJLIQIrIBs7EiKGVEIillRHEERIAFIFNvbGRQsgWyCSOyECKyAbOJigEAMQAyCRJEIihlRIv/EkQiKGVEIihlRCIpZUQiKGVEsUyyEUyyFUyyFCSyECKyAbayCSOyECKyAbOJIihlRIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Listing contract
 */
export type ListingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(asset,address)void': {
      /**
       * the asa ID that is to be sold
       */
      asset: bigint
      /**
       * the wallet of the account selling the asset
       */
      seller: string
    }
    'recordNegotiatedPrice(uint64)void': {
      price: bigint | number
    }
    'optinToListingAsset(pay,uint64)void': {
      /**
       * The payment transaction
       */
      payment: AppMethodCallTransactionArgument
      /**
       * The asset to be opted into
       */
      asset: bigint | number
    }
    'purchase(pay,address)void': {
      /**
       * - the payment for purchasing the asset
       */
      payment: AppMethodCallTransactionArgument
      /**
       * - the buyer of the asset
       */
      buyer: string
    }
    'delist(address)void': {
      caller: string
    }
    'getSeller()address': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(asset,address)void': [asset: bigint, seller: string]
    'recordNegotiatedPrice(uint64)void': [price: bigint | number]
    'optinToListingAsset(pay,uint64)void': [payment: AppMethodCallTransactionArgument, asset: bigint | number]
    'purchase(pay,address)void': [payment: AppMethodCallTransactionArgument, buyer: string]
    'delist(address)void': [caller: string]
    'getSeller()address': []
  }
}

/**
 * The return type for each method
 */
export type ListingReturns = {
  'createApplication(asset,address)void': void
  'recordNegotiatedPrice(uint64)void': void
  'optinToListingAsset(pay,uint64)void': void
  'purchase(pay,address)void': void
  'delist(address)void': void
  'getSeller()address': string
}

/**
 * Defines the types of available calls and state of the Listing smart contract.
 */
export type ListingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(asset,address)void' | 'createApplication', {
      argsObj: ListingArgs['obj']['createApplication(asset,address)void']
      argsTuple: ListingArgs['tuple']['createApplication(asset,address)void']
      returns: ListingReturns['createApplication(asset,address)void']
    }>
    & Record<'recordNegotiatedPrice(uint64)void' | 'recordNegotiatedPrice', {
      argsObj: ListingArgs['obj']['recordNegotiatedPrice(uint64)void']
      argsTuple: ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']
      returns: ListingReturns['recordNegotiatedPrice(uint64)void']
    }>
    & Record<'optinToListingAsset(pay,uint64)void' | 'optinToListingAsset', {
      argsObj: ListingArgs['obj']['optinToListingAsset(pay,uint64)void']
      argsTuple: ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']
      returns: ListingReturns['optinToListingAsset(pay,uint64)void']
    }>
    & Record<'purchase(pay,address)void' | 'purchase', {
      argsObj: ListingArgs['obj']['purchase(pay,address)void']
      argsTuple: ListingArgs['tuple']['purchase(pay,address)void']
      returns: ListingReturns['purchase(pay,address)void']
    }>
    & Record<'delist(address)void' | 'delist', {
      argsObj: ListingArgs['obj']['delist(address)void']
      argsTuple: ListingArgs['tuple']['delist(address)void']
      returns: ListingReturns['delist(address)void']
    }>
    & Record<'getSeller()address' | 'getSeller', {
      argsObj: ListingArgs['obj']['getSeller()address']
      argsTuple: ListingArgs['tuple']['getSeller()address']
      returns: ListingReturns['getSeller()address']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * the asset for sale
         */
        asset: bigint
        negotiatedPrice: bigint
        /**
         * the address selling the asset
         */
        seller: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ListingSignatures = keyof ListingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ListingNonVoidMethodSignatures = keyof ListingTypes['methods'] extends infer T ? T extends keyof ListingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Listing smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ListingSignatures> = ListingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Listing smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ListingSignatures> = ListingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ListingTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ListingCreateCallParams =
  | Expand<CallParams<ListingArgs['obj']['createApplication(asset,address)void'] | ListingArgs['tuple']['createApplication(asset,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ListingArgs['obj']['createApplication(asset,address)void'] | ListingArgs['tuple']['createApplication(asset,address)void']> & {method: 'createApplication(asset,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type ListingDeleteCallParams =
  | Expand<CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']> & {method: 'purchase'}>
  | Expand<CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']> & {method: 'purchase(pay,address)void'}>
  | Expand<CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']> & {method: 'delist'}>
  | Expand<CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']> & {method: 'delist(address)void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type ListingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ListingCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: ListingDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Listing smart contract
 */
export abstract class ListingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ListingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(asset,address)void':
            return ListingParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Listing smart contract using the createApplication(asset,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ListingArgs['obj']['createApplication(asset,address)void'] | ListingArgs['tuple']['createApplication(asset,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(asset,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.seller],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends ListingDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'purchase':
          case 'purchase(pay,address)void':
            return ListingParamsFactory.delete.purchase(params)
          case 'delist':
          case 'delist(address)void':
            return ListingParamsFactory.delete.delist(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Listing smart contract using the purchase(pay,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      purchase(params: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'purchase(pay,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.buyer],
        }
      },
      /**
       * Constructs delete ABI call params for the Listing smart contract using the delist(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      delist(params: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delist(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.caller],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the recordNegotiatedPrice(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordNegotiatedPrice(params: CallParams<ListingArgs['obj']['recordNegotiatedPrice(uint64)void'] | ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recordNegotiatedPrice(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.price],
    }
  }
  /**
   * Constructs a no op call for the optinToListingAsset(pay,uint64)void ABI method
   *
   * optin tells the contract to opt into an asa
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optinToListingAsset(params: CallParams<ListingArgs['obj']['optinToListingAsset(pay,uint64)void'] | ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optinToListingAsset(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the getSeller()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSeller(params: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getSeller()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Listing smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ListingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ListingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ListingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ListingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Listing smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ListingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ListingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ListingCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? ListingParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (ListingDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ListingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Listing smart contract using the createApplication(asset,address)void ABI method.
       *
       * create the listing application
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ListingArgs['obj']['createApplication(asset,address)void'] | ListingArgs['tuple']['createApplication(asset,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(ListingParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Listing smart contract using the purchase(pay,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      purchase: (params: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']>) => {
        return this.appFactory.params.deployDelete(ListingParamsFactory.delete.purchase(params))
      },
      /**
       * Deletes an existing instance of the Listing smart contract using the delist(address)void ABI method.
       *
       * Deletes the app and returns the asset/mbr to the seller
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      delist: (params: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']>) => {
        return this.appFactory.params.deployDelete(ListingParamsFactory.delete.delist(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Listing smart contract using the createApplication(asset,address)void ABI method.
       *
       * create the listing application
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ListingArgs['obj']['createApplication(asset,address)void'] | ListingArgs['tuple']['createApplication(asset,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(ListingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Listing smart contract using an ABI method call using the createApplication(asset,address)void ABI method.
       *
       * create the listing application
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ListingArgs['obj']['createApplication(asset,address)void'] | ListingArgs['tuple']['createApplication(asset,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(ListingParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ListingReturns['createApplication(asset,address)void']) }, appClient: new ListingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Listing smart contract
 */
export class ListingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ListingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Listing app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ListingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ListingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ListingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ListingClient> {
    return new ListingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ListingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ListingClient> {
    return new ListingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Listing smart contract using the `purchase(pay,address)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      purchase: (params: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']>) => {
        return this.appClient.params.delete(ListingParamsFactory.delete.purchase(params))
      },

      /**
       * Deletes an existing instance of the Listing smart contract using the `delist(address)void` ABI method.
       *
       * Deletes the app and returns the asset/mbr to the seller
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      delist: (params: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']>) => {
        return this.appClient.params.delete(ListingParamsFactory.delete.delist(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Listing smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Listing smart contract using the `recordNegotiatedPrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordNegotiatedPrice: (params: CallParams<ListingArgs['obj']['recordNegotiatedPrice(uint64)void'] | ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ListingParamsFactory.recordNegotiatedPrice(params))
    },

    /**
     * Makes a call to the Listing smart contract using the `optinToListingAsset(pay,uint64)void` ABI method.
     *
     * optin tells the contract to opt into an asa
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optinToListingAsset: (params: CallParams<ListingArgs['obj']['optinToListingAsset(pay,uint64)void'] | ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ListingParamsFactory.optinToListingAsset(params))
    },

    /**
     * Makes a call to the Listing smart contract using the `getSeller()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSeller: (params: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ListingParamsFactory.getSeller(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Listing smart contract using the `purchase(pay,address)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      purchase: (params: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']>) => {
        return this.appClient.createTransaction.delete(ListingParamsFactory.delete.purchase(params))
      },

      /**
       * Deletes an existing instance of the Listing smart contract using the `delist(address)void` ABI method.
       *
       * Deletes the app and returns the asset/mbr to the seller
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      delist: (params: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']>) => {
        return this.appClient.createTransaction.delete(ListingParamsFactory.delete.delist(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Listing smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Listing smart contract using the `recordNegotiatedPrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordNegotiatedPrice: (params: CallParams<ListingArgs['obj']['recordNegotiatedPrice(uint64)void'] | ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ListingParamsFactory.recordNegotiatedPrice(params))
    },

    /**
     * Makes a call to the Listing smart contract using the `optinToListingAsset(pay,uint64)void` ABI method.
     *
     * optin tells the contract to opt into an asa
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optinToListingAsset: (params: CallParams<ListingArgs['obj']['optinToListingAsset(pay,uint64)void'] | ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ListingParamsFactory.optinToListingAsset(params))
    },

    /**
     * Makes a call to the Listing smart contract using the `getSeller()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSeller: (params: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ListingParamsFactory.getSeller(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Listing smart contract using the `purchase(pay,address)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      purchase: async (params: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']> & SendParams) => {
        const result = await this.appClient.send.delete(ListingParamsFactory.delete.purchase(params))
        return {...result, return: result.return as unknown as (undefined | ListingReturns['purchase(pay,address)void'])}
      },

      /**
       * Deletes an existing instance of the Listing smart contract using the `delist(address)void` ABI method.
       *
       * Deletes the app and returns the asset/mbr to the seller
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      delist: async (params: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']> & SendParams) => {
        const result = await this.appClient.send.delete(ListingParamsFactory.delete.delist(params))
        return {...result, return: result.return as unknown as (undefined | ListingReturns['delist(address)void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Listing smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Listing smart contract using the `recordNegotiatedPrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordNegotiatedPrice: async (params: CallParams<ListingArgs['obj']['recordNegotiatedPrice(uint64)void'] | ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ListingParamsFactory.recordNegotiatedPrice(params))
      return {...result, return: result.return as unknown as (undefined | ListingReturns['recordNegotiatedPrice(uint64)void'])}
    },

    /**
     * Makes a call to the Listing smart contract using the `optinToListingAsset(pay,uint64)void` ABI method.
     *
     * optin tells the contract to opt into an asa
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optinToListingAsset: async (params: CallParams<ListingArgs['obj']['optinToListingAsset(pay,uint64)void'] | ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ListingParamsFactory.optinToListingAsset(params))
      return {...result, return: result.return as unknown as (undefined | ListingReturns['optinToListingAsset(pay,uint64)void'])}
    },

    /**
     * Makes a call to the Listing smart contract using the `getSeller()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSeller: async (params: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ListingParamsFactory.getSeller(params))
      return {...result, return: result.return as unknown as (undefined | ListingReturns['getSeller()address'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ListingClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Listing smart contract using the `getSeller()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getSeller(params: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']> = {args: []}) {
    const result = await this.appClient.send.call(ListingParamsFactory.getSeller(params))
    return result.return as unknown as ListingReturns['getSeller()address']
  }

  /**
   * Methods to access state for the current Listing app
   */
  state = {
    /**
     * Methods to access global state for the current Listing app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          asset: result.asset,
          negotiatedPrice: result.negotiatedPrice,
          seller: result.seller,
        }
      },
      /**
       * Get the current value of the asset key in global state
       */
      asset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset")) as bigint | undefined },
      /**
       * Get the current value of the negotiatedPrice key in global state
       */
      negotiatedPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("negotiatedPrice")) as bigint | undefined },
      /**
       * Get the current value of the seller key in global state
       */
      seller: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("seller")) as string | undefined },
    },
  }

  public newGroup(): ListingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a recordNegotiatedPrice(uint64)void method call against the Listing contract
       */
      recordNegotiatedPrice(params: CallParams<ListingArgs['obj']['recordNegotiatedPrice(uint64)void'] | ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordNegotiatedPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optinToListingAsset(pay,uint64)void method call against the Listing contract
       */
      optinToListingAsset(params: CallParams<ListingArgs['obj']['optinToListingAsset(pay,uint64)void'] | ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optinToListingAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getSeller()address method call against the Listing contract
       */
      getSeller(params: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSeller(params)))
        resultMappers.push((v) => client.decodeReturnValue('getSeller()address', v))
        return this
      },
      get delete() {
        return {
          purchase: (params: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.purchase(params)))
            resultMappers.push(undefined)
            return this
          },
          delist: (params: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delist(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Listing contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ListingComposer
  }
}
export type ListingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the recordNegotiatedPrice(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordNegotiatedPrice(params?: CallParams<ListingArgs['obj']['recordNegotiatedPrice(uint64)void'] | ListingArgs['tuple']['recordNegotiatedPrice(uint64)void']>): ListingComposer<[...TReturns, ListingReturns['recordNegotiatedPrice(uint64)void'] | undefined]>

  /**
   * Calls the optinToListingAsset(pay,uint64)void ABI method.
   *
   * optin tells the contract to opt into an asa
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optinToListingAsset(params?: CallParams<ListingArgs['obj']['optinToListingAsset(pay,uint64)void'] | ListingArgs['tuple']['optinToListingAsset(pay,uint64)void']>): ListingComposer<[...TReturns, ListingReturns['optinToListingAsset(pay,uint64)void'] | undefined]>

  /**
   * Calls the getSeller()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSeller(params?: CallParams<ListingArgs['obj']['getSeller()address'] | ListingArgs['tuple']['getSeller()address']>): ListingComposer<[...TReturns, ListingReturns['getSeller()address'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Listing smart contract using the purchase(pay,address)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    purchase(params?: CallParams<ListingArgs['obj']['purchase(pay,address)void'] | ListingArgs['tuple']['purchase(pay,address)void']>): ListingComposer<[...TReturns, ListingReturns['purchase(pay,address)void'] | undefined]>
    /**
     * Deletes an existing instance of the Listing smart contract using the delist(address)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delist(params?: CallParams<ListingArgs['obj']['delist(address)void'] | ListingArgs['tuple']['delist(address)void']>): ListingComposer<[...TReturns, ListingReturns['delist(address)void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Listing smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ListingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ListingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ListingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ListingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ListingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ListingComposerResults<TReturns>>
}
export type ListingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

